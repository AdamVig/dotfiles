#!/usr/bin/env bash

xdg_config() {
  echo "${XDG_CONFIG_HOME:-$HOME/.config}"
}

xdg_data() {
  echo "${XDG_DATA_HOME:-$HOME/.local/share}"
}

xdg_cache() {
  echo "${XDG_CACHE_HOME:-$HOME/.cache}"
}

update() {
    echo "Updating Homebrew..."
    brew update

    echo "Upgrading Homebrew formulas..."
    brew upgrade

    echo "Upgrading Homebrew Cask formulas..."
    brew cask upgrade --greedy || true

    echo "Updating npm..."
    npm i -g npm

    echo "Updating global npm..."
    npm update -g

    echo "Updating global pip packages..."
    pip list --user --outdated --format freeze | xargs -n1 pip install --upgrade --user
}

alias upgrade=update

# Get all Jira ticket IDs mentioned in commits in develop that are not in master
get-tickets() {
    git fetch --all > /dev/null
    git log origin/master..origin/develop --extended-regexp --grep 'TOOLS|APPS' --pretty=oneline | grep -Po '(APPS|TOOLS)-[0-9]+' | uniq -u
}

# Find the current randomized name of a pod for an application
# $1: namespace
# $2: application name
kube-pod() {
    kubectl get pods --output json --namespace "$1" | jq --arg app "$2" '.items[] | select(.metadata.labels.app == $app).metadata.name'
}

# Get all peer dependencies for a given package as a string suitable for input to `npm install`
# $1: name of package installed in current project's node_modules
get-peer-dependencies() {
    jq --raw-output \
    '.peerDependencies | to_entries | map("\(.key)@\(.value)") | join(" ")' \
    "./node_modules/$1/package.json"
}

# Install all peer dependencies for a given package
# $1: name of package installed in current project's node_modules
install-peer-dependencies() {
    npm install $(get-peer-dependencies "$1")
}

# Open a file or URL from WSL using the default handler
# $1: file path or URL
wsl-open() {
    cmd.exe /C start "$1"
}
if command -v is-wsl > /dev/null && is-wsl; then
    alias open=wsl-open
fi
