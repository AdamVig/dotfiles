#!/usr/bin/env bash

readonly _dir_functions="$(dirname "$(realpath "${BASH_SOURCE[0]}")")"

xdg_config() {
	echo "${XDG_CONFIG_HOME:-$HOME/.config}"
}

xdg_data() {
	echo "${XDG_DATA_HOME:-$HOME/.local/share}"
}

xdg_cache() {
	echo "${XDG_CACHE_HOME:-$HOME/.cache}"
}

get_brew_prefix() {
	if "$_dir_functions"/bin/is-macos; then
		echo '/usr/local'
	elif "$_dir_functions"/bin/is-linux; then
		echo '/home/linuxbrew/.linuxbrew'
	fi
}

update() {
	echo "updating Homebrew..."
	brew update

	echo "upgrading Homebrew formulas..."
	brew upgrade

	echo "upgrading Homebrew Cask formulas..."
	brew cask upgrade || true

	echo "updating npm..."
	npm i -g npm

	echo "updating global npm..."
	npm update -g

	echo "updating global pip packages..."
	pip list --user --outdated --format freeze | xargs -n1 pip install --upgrade --user
}

alias upgrade=update

# Find the current randomized name of a pod for an application
# $1: namespace
# $2: application name
kube-pod() {
	kubectl get pods --output json --namespace "$1" | jq --raw-output --arg app "$2" '.items[] | select(.metadata.labels.app == $app) | .metadata.name'
}

# Get all peer dependencies for a given package as a string suitable for input to `npm install`
# $1: name of package installed in current project's node_modules
get-peer-dependencies() {
	jq --raw-output \
		'.peerDependencies | to_entries | map("\(.key)@\(.value)") | join(" ")' \
		"./node_modules/$1/package.json"
}

# Install all peer dependencies for a given package
# $1: name of package installed in current project's node_modules
install-peer-dependencies() {
	# shellcheck disable=SC2046
	npm install $(get-peer-dependencies "$1")
}
