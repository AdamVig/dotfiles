#!/usr/bin/env bash

set -euo pipefail

readonly usage
usage="Usage: $(basename "$0") [-h|--help] [-f|--force]
Use metadata from an open GitHub pull request to merge the current branch into the pull request's base branch.

Flags:
    -f, --force   temporarily disable branch protections on the base branch in order to merge with failing status checks
    -h, --help    show this help text"

force=1

set +e
getopt --test >/dev/null
if [ $? -ne 4 ]; then
	echo 'error: enhanced getopt is not installed' >&2
	exit 1
fi
set -e

opts=$(getopt -o 'hf' --long 'help,force' --name "$(basename "$0")" -- "$@")
eval set -- "$opts"
unset opts

while true; do
	case "$1" in
	'-h' | '--help')
		echo "$usage"
		exit
		;;
	'-f' | '--force')
		force=0
		shift
		continue
		;;
	'--')
		shift
		break
		;;
	*)
		echo 'error: failed to parse arguments' >&2
		exit 1
		;;
	esac
done

if ! check-installed gh https://cli.github.com/; then
	return 1
fi

errlog() {
	echo >&2 "$@"
}

current_branch="$(git rev-parse --abbrev-ref HEAD)"
default_branch="$(get-default-branch origin)"
# Extract pull request information into three separate variables
# - Set IFS to newline so that `read` parses multiple lines of input
# - Set delimiter (`-d`) to `%` instead of the default, which is newline
# - Format is title, newline, body, newline, URL, percent sign
# shellcheck disable=SC2162
IFS=$'\n' read -d '%' title base_branch pull_request_url < <(hub pr show --head "$current_branch" --format '%t%n%B%n%U%%')

if [ "$current_branch" = "$default_branch" ]; then
	errlog "error: current branch is default branch, please run again from a different branch"
	exit 1
fi

branch="$default_branch"
if [ -n "$base_branch" ]; then
	branch="$base_branch"
fi

message_args=()
# Use custom merge commit message when pull request title is available
if [ -n "$title" ]; then
	message="$title

$pull_request_url"
	message_args=('--message' "$message")
fi

if [ $force -eq 0 ]; then
	echo 'disabling branch protection...'
	if ! gh api --method=DELETE "/repos/{owner}/{repo}/branches/${base_branch}/protection/enforce_admins" >/dev/null; then
		errlog "warning: failed to disable branch protection on branch '$base_branch'"
	fi

	enable_branch_protection() {
		echo 're-enabling branch protection...'
		if ! gh api --method=POST "/repos/{owner}/{repo}/branches/${base_branch}/protection/enforce_admins" >/dev/null; then
			errlog "warning: failed to enable branch protection on branch '$base_branch'"
		fi
	}

	# Use a trap to ensure that this runs no matter what
	trap enable_branch_protection EXIT
fi

if ! git pull; then
	errlog 'error: failed to pull into current branch'
	exit 1
fi

if ! git checkout "$branch"; then
	errlog "error: failed to check out branch '$branch'"
	exit
fi

# Ensure base branch is up to date with its remote counterpart
if ! merge-latest "$branch"; then
	errlog 'error: failed to update base branch from the remote'
	git switch "$current_branch"
	exit 1
fi

if ! git merge --no-ff "$current_branch" "${message_args[@]}"; then
	errlog "error: failed to merge '$current_branch' into '$branch'"
	git switch "$current_branch"
	exit 1
fi

if ! git push; then
	errlog "error: failed to push '$branch' to remote"

	if ! git reset --hard origin/"$current_branch"; then
		errlog 'warning: failed to undo merge, you will need to undo it manually' "(git reset --hard origin/$current_branch)"
	else
		# Only switch back to original branch when merge was successfully undone
		git switch "$current_branch"
	fi

	exit 1
fi

# Only delete local branch if all operations succeed
if ! git branch --delete "$current_branch"; then
	errlog "warning: failed to delete '$current_branch' locally"
fi

# If remote branch deletion fails and branch still exists on remote, log a warning
if ! git push origin --delete "$current_branch" &>/dev/null &&
	git ls-remote --exit-code --quiet --heads origin "$current_branch" >/dev/null; then
	echo "warning: failed to delete '$current_branch' on the remote"
fi
