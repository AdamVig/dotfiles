#!/usr/bin/env bash

set -euo pipefail

readonly usage="Usage: $(basename "$0") [-h|--help]
Run personal automations.

Flags:
    -h, --help    show this help text

Commands:
    focus [duration in minutes] snooze Slack notifications for <duration> and set a Slack status
    unfocus                     end Slack snooze and clear Slack status
    afk                         set a Slack status and set presence to 'away'
    unafk                       clear Slack status and set presence to 'active'

Examples:
    i focus 5
    i afk
    i afk lunch"

set +e
getopt --test > /dev/null
if [ $? -ne 4 ]; then
  echo 'error: enhanced getopt is not installed' >&2
  exit 1
fi
set -e

opts=$(getopt -o 'h' --long 'help' --name "$(basename "$0")" -- "$@")
eval set -- "$opts"
unset opts

while true; do
  case "$1" in
    '-h'|'--help')
      echo "$usage"
      exit
    ;;
    '--')
      shift
      break
    ;;
    *)
      echo 'error: failed to parse arguments' >&2
      exit 1
    ;;
  esac
done

if ! check-installed jq https://stedolan.github.io/jq/ || ! check-installed slack https://github.com/rockymadden/slack-cli; then
  exit 1
fi

# $1: duration in minutes
focus() {
  local duration="${1:-}"
  if [ -z "$duration" ]; then
    duration='30'
  fi

  local end_time
  if end_time="$(date '+%-I:%M %p' --date "$duration min")"; then
    echo "focusing until $end_time ($duration minutes)"
  else
    echo 'failed to calculate Slack status expiration end time'
  fi

  if ! slack snooze start "$duration" > /dev/null; then
    echo 'failed to snooze Slack notifications'
  fi

  if ! slack status edit 'focusing' ':thought_balloon:' > /dev/null; then
    echo 'failed to set Slack status'
  fi

  if [ -n "${SLACK_CLI_TOKEN:-}" ]; then
    local duration_ms
    # Subtract one minute to account for difference between snooze and status time handling
    if ! duration_ms=$(date +%s --date "$duration min - 1 min"); then
      echo 'failed to calculate Slack status expiration duration'
    elif ! curl -s -X POST https://slack.com/api/users.profile.set \
      --data-urlencode "profile={\"status_expiration\": $duration_ms}" \
      --data-urlencode "token=${SLACK_CLI_TOKEN}" > /dev/null; then
      echo 'failed to set Slack status expiration'
    fi
  else
    echo 'error: cannot set Slack status expiration because SLACK_CLI_TOKEN is not set'
  fi
}

unfocus() {
  echo 'ending focus period'
  if ! slack snooze end > /dev/null; then
    echo 'failed to end Slack snooze'
  fi

  if ! slack status clear > /dev/null; then
    echo 'failed to clear Slack status'
  fi
}

afk() {
  local type="${1:-}"
  if [ "$type" = 'lunch' ]; then
    status='lunch'
    emoji='knife_fork_plate'
  elif [ "$type" = 'out' ]; then
    status='out of office'
    emoji='spiral_calendar_pad'
  else
    status='away from keyboard'
    emoji='timer_clock'
  fi

  echo 'going away from keyboard'
  if ! slack status edit "$status" ":${emoji}:" > /dev/null; then
    echo 'failed to set Slack status'
  fi

  if ! slack presence away > /dev/null; then
    echo 'failed to set Slack presence'
  fi
}

unafk() {
  echo 'coming back to keyboard'
  if ! slack status clear > /dev/null; then
    echo 'failed to clear Slack status'
  fi

  if ! slack presence active > /dev/null; then
    echo 'failed to set Slack presence'
  fi
}

if [ "$1" = 'focus' ]; then
  shift
  focus "$@"
elif [ "$1" = 'unfocus' ]; then
  shift
  unfocus "$@"
elif [ "$1" = 'afk' ]; then
  shift
  afk "$@"
elif [ "$1" = 'unafk' ]; then
  shift
  unafk "$@"
fi