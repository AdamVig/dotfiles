#!/usr/bin/env bash

_dir="$(dirname "$(realpath "${BASH_SOURCE[0]}")")"

set -euo pipefail

usage="Usage: $(basename "$0") [-h|--help]
Update applications, packages, and tools.

Flags:
    -h, --help  show this help text"

if [ "${1:-}" = "-h" ] || [ "${1:-}" = "--help" ]; then
	echo "$usage"
	exit 0
fi

standout="$(tput smso)"
background_blue="$(tput setab 4)"
background_green="$(tput setab 2)"
background_red="$(tput setab 1)"
reset="$(tput sgr0)"

log_operation() {
	operation="${1:-}"
	if [ -z "$operation" ]; then
		echo 'internal error: log_operation called without an operation'
		return 1
	fi

	echo -n "${standout} ${operation} ${reset}"
}

log_success() {
	echo "${background_green} succeeded ${reset}"
}

log_failure() {
	echo "${background_red} failed ${reset}"
}

update_brew() {
	echo 'brew registry'
	brew update

	echo 'brew formulas'
	brew upgrade

	echo 'brew casks'
	brew upgrade --cask
}

update_npm() {
	# Disabled until npm v7 is commonplace
	# echo 'npm'
	# npm i -g npm

	echo 'npm packages'
	npm update -g
}

update_pip() {
	# Disable keyring to prevent interactive prompts (https://github.com/pypa/pip/issues/8090#issuecomment-803363268)
	export PYTHON_KEYRING_BACKEND=keyring.backends.null.Keyring

	echo 'pip'
	python3 -m pip install --upgrade --user pip

	echo 'pip packages'
	# xargs: -r to skip the run if there is no input; -n1 to use one line per invocation
	python3 -m pip list --user --outdated --format=freeze | xargs -r -n1 python3 -m pip install --upgrade --user
}

update_apt() {
	echo 'apt registry'
	sudo apt-get update

	echo 'apt packages'
	sudo apt-get upgrade --yes

	echo 'apt cleanup'
	sudo apt-get autoremove --yes
}

update_linux_software() {
	echo 'linux software'
	"$_dir"/../lib/linux-software
}

update_nodenv_plugins() {
	echo 'nodenv plugins'
	for plugin in "$NODENV_ROOT"/plugins/*; do
		git -C "$plugin" pull --no-rebase
	done
}

update_thunderbird() {
	echo 'thunderbird'
	"$_dir"/../lib/thunderbird
}

update_gh_extensions() {
	echo 'gh extensions'
	gh extension upgrade --all
}

sudo --validate --prompt="${background_blue} password: ${reset} "

if command -v brew >/dev/null; then
	log_operation brew
	brew_log="$(mktemp)"
	if ! update_brew &>"$brew_log"; then
		log_failure
		cat "$brew_log"
	else
		log_success
	fi
	rm -f "$brew_log"
fi

log_operation npm
npm_log="$(mktemp)"
if ! update_npm &>"$npm_log"; then
	log_failure
	cat "$npm_log"
else
	log_success
fi
rm -f "$npm_log"

log_operation pip
pip_log="$(mktemp)"
if ! update_pip $ >"$pip_log"; then
	log_failure
	cat "$pip_log"
else
	log_success
fi
rm -f "$pip_log"

if command -v apt-get >/dev/null; then
	log_operation apt
	apt_log="$(mktemp)"
	if ! update_apt &>"$apt_log"; then
		log_failure
		cat "$apt_log"
	else
		log_success
	fi
	rm -f "$apt_log"
fi

if is-linux; then
	log_operation 'linux software'
	linux_software_log="$(mktemp)"
	if ! update_linux_software &>"$linux_software_log"; then
		log_failure
		cat "$linux_software_log"
	else
		log_success
	fi
	rm -f "$linux_software_log"

	log_operation 'nodenv plugins'
	nodenv_plugins_log="$(mktemp)"
	if ! update_nodenv_plugins &>"$nodenv_plugins_log"; then
		log_failure
		cat "$nodenv_plugins_log"
	else
		log_success
	fi
	rm -f "$nodenv_plugins_log"

	log_operation thunderbird
	thunderbird_log="$(mktemp)"
	if ! update_thunderbird &>"$thunderbird_log"; then
		log_failure
		cat "$thunderbird_log"
	else
		log_success
	fi
	rm -f "$thunderbird_log"
fi

log_operation 'gh extensions'
gh_extensions_log="$(mktemp)"
if ! update_gh_extensions &>"$gh_extensions_log"; then
	log_failure
	cat "$gh_extensions_log"
else
	log_success
fi
rm -f "$gh_extensions_log"
