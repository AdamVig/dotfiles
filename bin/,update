#!/usr/bin/env bash

_dir="$(dirname "$(realpath "${BASH_SOURCE[0]}")")"

set -euo pipefail

usage="Usage: $(basename "$0") [-h|--help]
Update applications, packages, and tools.

Flags:
    -h, --help  show this help text"

if [ "${1:-}" = "-h" ] || [ "${1:-}" = "--help" ]; then
	echo "$usage"
	exit 0
fi

standout="$(tput smso)"
dim="$(tput dim)"
background_blue="$(tput setab 4)"
background_green="$(tput setab 2)"
background_red="$(tput setab 1)"
reset="$(tput sgr0)"

log_operation() {
	operation="${1:-}"
	if [ -z "$operation" ]; then
		echo 'internal error: log_operation called without an operation'
		return 1
	fi

	echo -n "${standout} ${operation} ${reset}"
}

log_success() {
	echo "${background_green} succeeded ${reset}"
}

log_failure() {
	echo "${background_red} failed ${reset}"
}

# $1: PID of process to wait for
# $2: path to file containing output to log
log_output() {
	pid="${1:-}"
	if [ -z "$pid" ]; then
		echo 'internal error: log_output called without PID'
		return 1
	fi

	output_path="${2:-}"
	if [ -z "$output_path" ]; then
		echo 'internal error: log_output called without output path'
		return 1
	fi

	tput sc
	while kill -0 "$pid" 2>/dev/null; do
		tput rc 1
		tput el
		echo
		tail --lines=5 "$output_path"
		sleep 0.2s
	done
	tput rc 1
	tput el
}

# $1: operation name
# $2: operation function
run_operation() {
	log_operation "$1"
	log="$(mktemp)"
	$2 &>"$log" &
	pid=$!
	log_output $pid "$log"
	if ! wait "$pid"; then
		log_failure
		cat "$log"
	else
		log_success
	fi
	rm -f "$log"
}

update_brew() {
	echo 'brew registry'
	brew update

	echo 'brew formulas'
	brew upgrade

	echo 'brew casks'
	brew upgrade --cask
}

update_npm() {
	# Disabled until npm v7 is commonplace
	# echo 'npm'
	# npm i -g npm

	echo 'npm packages'
	npm update -g
}

update_pip() {
	# Disable keyring to prevent interactive prompts (https://github.com/pypa/pip/issues/8090#issuecomment-803363268)
	export PYTHON_KEYRING_BACKEND=keyring.backends.null.Keyring

	echo 'pip'
	python3 -m pip install --upgrade --user pip

	echo 'pip packages'
	# xargs: -r to skip the run if there is no input; -n1 to use one line per invocation
	python3 -m pip list --user --outdated --format=freeze | xargs -r -n1 python3 -m pip install --upgrade --user
}

update_apt() {
	echo 'apt registry'
	sudo apt-get update

	echo 'apt packages'
	sudo apt-get upgrade --yes

	echo 'apt cleanup'
	sudo apt-get autoremove --yes
}

update_linux_software() {
	echo 'linux software'
	"$_dir"/../lib/linux-software
}

update_nodenv_plugins() {
	echo 'nodenv plugins'
	for plugin in "$NODENV_ROOT"/plugins/*; do
		git -C "$plugin" pull --no-rebase
	done
}

update_thunderbird() {
	echo 'thunderbird'
	"$_dir"/../lib/thunderbird
}

update_gh_extensions() {
	echo 'gh extensions'
	gh extension upgrade --all
}

update_emacs_packages() {
	echo 'emacs packages'
	emacsclient --eval '(auto-package-update-now)'
}

# Reset terminal to ensure log_output's overwriting logic works correctly
reset

log_operation sudo
tput sc
if sudo --validate --prompt="${background_blue} password: ${reset} " 2>/dev/null; then
	tput rc 1
	log_success
else
	tput rc 1
	echo "${dim} proceeding without sudo${reset}"
fi

if command -v brew >/dev/null; then
	run_operation 'brew' update_brew
fi

run_operation 'npm' update_npm

run_operation 'pip' update_pip

if command -v apt-get >/dev/null; then
	run_operation 'apt' update_apt
fi

if is-linux; then
	run_operation 'linux software' update_linux_software

	run_operation 'nodenv plugins' update_nodenv_plugins

	run_operation 'thunderbird' update_thunderbird
fi

run_operation 'gh extensions' update_gh_extensions
run_operation 'emacs packages' update_emacs_packages

# To add user-specific or device-specific updates, create a file at the following path containing something like this:
# update_foo() {
#   echo 'bar'
#   foo bar
# }
# run_operation 'foo' update_foo

update_local_path="${XDG_DATA_HOME:-$HOME/.local/share}"/dotfiles/,update-local
if [ -f "$update_local_path" ]; then
	# shellcheck source=/dev/null
	source "$update_local_path"
fi
