#!/usr/bin/env bash

_dir="$(dirname "$(realpath "${BASH_SOURCE[0]}")")"

set -euo pipefail

usage="Usage: $(basename "$0") [-h|--help]
Update applications, packages, and tools.

Flags:
    -h, --help  show this help text"

if [ "${1-}" = "-h" ] || [ "${1-}" = "--help" ]; then
	echo "$usage"
	exit 0
fi

standout="$(tput smso)"
dim="$(tput dim)"
background_blue="$(tput setab 4)"
background_green="$(tput setab 2)"
background_red="$(tput setab 1)"
reset="$(tput sgr0)"

log_operation() {
	operation="${1-}"
	if [ -z "$operation" ]; then
		echo 'internal error: log_operation called without an operation'
		return 1
	fi

	echo -n "${standout} ${operation} ${reset}"
}

log_success() {
	echo "${background_green} succeeded ${reset}"
}

log_failure() {
	echo "${background_red} failed ${reset}"
}

# $1: PID of process to wait for
# $2: path to file containing output to log
log_output() {
	pid="${1-}"
	if [ -z "$pid" ]; then
		echo 'internal error: log_output called without PID'
		return 1
	fi

	output_path="${2-}"
	if [ -z "$output_path" ]; then
		echo 'internal error: log_output called without output path'
		return 1
	fi

	tput sc
	echo
	tail --follow --pid="$pid" --sleep-interval=0.2 "$output_path"
	tput rc
	# https://unix.stackexchange.com/a/552884
	tput ed || tput cd
}

# $1: operation name
# $2: operation function
run_operation() {
	log_operation "$1"
	log="$(mktemp)"
	$2 &>"$log" &
	pid=$!
	log_output $pid "$log"
	if ! wait "$pid"; then
		log_failure
		cat "$log"
	else
		log_success
	fi
	rm -f "$log"
}

update_brew() {
	echo 'brew cleanup'
	brew cleanup

	echo 'brew registry'
	brew update

	echo 'brew formulas'
	brew upgrade

	echo 'brew casks'
	brew upgrade --cask
}

update_npm() {
	for version in $(nodenv versions --skip-aliases --bare); do
		echo "npm packages in node $version"
		NODENV_VERSION="$version" nodenv exec npm update -g
	done
}

update_pip() {
	echo 'pip'
	"$_dir"/../lib/pip
}

update_apt() {
	# For all commands, use "quiet" to avoid overwriting lines, which breaks formatting
	# https://salsa.debian.org/apt-team/apt/-/blob/dccfe14ffb9713fbf320691c0f6cd679f2acf4fc/apt-private/acqprogress.cc#L356-357

	echo 'apt registry'
	sudo apt-get --quiet=2 update

	echo 'apt packages'
	sudo apt-get --quiet=2 upgrade --yes

	echo 'apt cleanup'
	sudo apt-get --quiet=2 autoremove --yes
}

update_linux_software() {
	echo 'linux software'
	"$_dir"/../lib/linux-software
}

update_nodenv() {
	echo 'nodenv'
	git -C "$NODENV_ROOT" pull --no-rebase

	echo 'nodenv plugins'
	for plugin in "$NODENV_ROOT"/plugins/*; do
		git -C "$plugin" pull --no-rebase
	done
}

update_gh_extensions() {
	echo 'gh extensions'
	gh extension upgrade --all
}

update_emacs_packages() {
	echo 'emacs packages'
	emacsclient --eval '(auto-package-update-now)'
}

update_tldr() {
	echo 'tldr cache'
	tldr --update
}

update_macos() {
	echo 'macos'
	if [ -n "$user_password" ]; then
		echo "$user_password" | softwareupdate --install --recommended --user="$USER" --stdinpass
	else
		softwareupdate --download
	fi
}

main() {
	log_operation sudo
	tput sc
	if read -r -s -p "${background_blue} password: ${reset} " user_password &&
		echo "$user_password" | sudo --stdin --validate 2>/dev/null; then
		tput rc
		log_success
	else
		tput rc
		echo "${dim} proceeding without sudo${reset}"
	fi

	if command -v brew >/dev/null; then
		run_operation 'brew' update_brew
	fi

	run_operation 'npm' update_npm

	run_operation 'pip' update_pip

	if command -v apt-get >/dev/null; then
		run_operation 'apt' update_apt
	fi

	if [[ $OSTYPE == *linux* ]]; then
		run_operation 'linux software' update_linux_software

		run_operation 'nodenv' update_nodenv
	fi

	run_operation 'gh extensions' update_gh_extensions
	run_operation 'emacs packages' update_emacs_packages
	run_operation 'tldr' update_tldr

	if [[ $OSTYPE == darwin* ]]; then
		run_operation 'macos' update_macos
	fi

	# To add user-specific or device-specific updates, create a file at the following path containing something like this:
	# update_foo() {
	#   echo 'bar'
	#   foo bar
	# }
	# run_operation 'foo' update_foo

	update_local_path="${XDG_DATA_HOME:-$HOME/.local/share}"/dotfiles/,update-local
	if [ -f "$update_local_path" ]; then
		# shellcheck source=/dev/null
		source "$update_local_path"
	fi
}

update_dotfiles() {
	branch_ahead_behind_pattern="# branch.ab \+[0-9]+ -([0-9]+)"
  git fetch &>/dev/null
	status="$(git status --porcelain=v2 --branch)"
	[[ "$status" =~ $branch_ahead_behind_pattern ]]
	[ "${BASH_REMATCH[1]}" != 0 ]
	git pull
	exec "$0" updated
}

if [ "${1-}" != 'updated' ]; then
	# Reset terminal to ensure log_output's overwriting logic works correctly
	reset
	run_operation 'dotfiles' update_dotfiles
fi

main
