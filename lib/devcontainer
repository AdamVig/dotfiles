#!/usr/bin/env bash

_dir="$(dirname "$(realpath "${BASH_SOURCE[0]}")")"

# shellcheck source=./lib/helpers
source "$_dir"/helpers

log() {
	log_with_component devcontainer "$@"
}

log_start 'setting up devcontainer'
if command -v apt-get >/dev/null; then
	log_start 'downloading bat'
	if ! bat_deb_path="$(download_deb_from_github_release 'sharkdp/bat' '_amd64.deb')"; then
		fatal 'failed to download bat'
	fi
	log_end

	log_start 'downloading git-delta'
	if ! delta_deb_path="$(download_deb_from_github_release 'dandavison/delta' '_amd64.deb')"; then
		fatal 'failed to download git-delta'
	fi
	log_end

	log_start 'downloading glow'
	if ! glow_deb_path="$(download_deb_from_github_release 'charmbracelet/glow' '_amd64.deb')"; then
		fatal 'failed to download glow'
	fi
	log_end

	declare -a packages=(
		# replacements of default utilities
		"$bat_deb_path"   # Better cat
		"$delta_deb_path" # Better git diff
		eza               # Better ls
		fd-find           # Better find
		htop              # Better top
		httpie            # Better curl
		ripgrep           # Better grep

		# command line tools
		fzf              # Fuzzy finder
		"$glow_deb_path" # Markdown viewer

		zsh
	)

	log_start 'installing packages'
	if ! request_sudo apt-get install --yes "${packages[@]}"; then
		warn 'failed to install apt packages; this may require manual resolution'
	fi
	log_end

	log_start 'linking fdfind to fd'
	mkdir -p "$HOME"/.local/bin
	_ln /usr/bin/fdfind "$HOME"/.local/bin/fd
	log_end
fi

log_start 'installing Codex'
if ! _curl "$(get_release_url 'openai/codex' 'codex-x86_64-unknown-linux-gnu.zst')" |
	unzstd --stdout |
	install --mode='u=rwx,go=rx' /dev/stdin "$HOME"/.local/bin/codex; then
	fatal 'failed to install codex'
fi
log_end

log_end
