#!/usr/bin/env bash

_dir="$(dirname "$(realpath "${BASH_SOURCE[0]}")")"

# shellcheck source=./lib/helpers
source "$_dir"/helpers

log() {
	log_with_component 'linux software' "$@"
}

log_start 'installing Linux distribution-agnostic software'
if is_ubuntu; then
	# Get password upfront to ensure the script runs to completion without pausing
	request_sudo
fi

log_start 'removing broken binary symlinks'
find "$HOME"/.local/bin -maxdepth 1 -xtype l -delete
log_end

log_start 'removing no-longer-needed software'
rm -vrf "$HOME"/.local/bin/undercutf1
log_end

log_start 'installing b2'
if ! install_binary_from_github_release 'b2' 'Backblaze/B2_Command_Line_Tool' 'linux'; then
	fatal 'failed to install b2'
fi
log_end

log_start 'installing difftastic'
if ! difftastic_url="$(get_release_url 'Wilfred/difftastic' 'difft-x86_64-unknown-linux-gnu.tar.gz')"; then
	fatal 'failed to get difftastic release URL'
fi

difftastic_tmp="$(mktemp)"
if ! _curl "$difftastic_url" --output "$difftastic_tmp"; then
	fatal 'failed to download difftastic'
fi

difftastic_extracted_tmp="$(mktemp -d)"
if ! tar zxvf "$difftastic_tmp" -C "$difftastic_extracted_tmp" >/dev/null; then
	fatal 'failed to extract difftastic'
fi
rm -f "$difftastic_tmp"

difftastic_path="$HOME"/.local/bin/difft
install "$difftastic_extracted_tmp"/difft "$difftastic_path"
rm -rf "$difftastic_extracted_tmp"
log_end

log_start 'installing fnm'
if ! fnm_url="$(get_release_url 'Schniz/fnm' 'fnm-linux.zip')"; then
	fatal 'failed to get fnm release URL'
fi
fnm_tmp="$(mktemp --suffix .zip)"
if ! _curl "$fnm_url" --output "$fnm_tmp"; then
	fatal 'failed to download fnm'
fi
fnm_extracted_tmp="$(mktemp -d)"
if ! unzip "$fnm_tmp" -d "$fnm_extracted_tmp" >/dev/null; then
	fatal 'failed to extract fnm'
fi
rm -f "$fnm_tmp"
fnm_path="$HOME"/.local/bin/fnm
install "$fnm_extracted_tmp"/fnm "$fnm_path"
rm -rf "$fnm_extracted_tmp"
fnm completions --shell=zsh >"${XDG_DATA_HOME:-$HOME/.local/share}"/zsh-site-functions/_fnm
log_end

log_start 'installing git-spice'
if ! git_spice_url="$(get_release_url 'abhinav/git-spice' '.Linux-x86_64.tar.gz')"; then
	fatal 'failed to get git-spice release URL'
fi

git_spice_tmp="$(mktemp)"
if ! _curl "$git_spice_url" --output "$git_spice_tmp"; then
	fatal 'failed to download git-spice'
fi

git_spice_extracted_tmp="$(mktemp -d)"
if ! tar zxvf "$git_spice_tmp" -C "$git_spice_extracted_tmp" >/dev/null; then
	fatal 'failed to extract git-spice'
fi
rm -f "$git_spice_tmp"

git_spice_path="$HOME"/.local/bin/gs
install "$git_spice_extracted_tmp"/gs "$git_spice_path"
rm -rf "$git_spice_extracted_tmp"
log_end

log_start 'installing git-who'
if ! git_who_url="$(get_release_url 'sinclairtarget/git-who' '_linux_amd64.tar.gz')"; then
	fatal 'failed to get git-who release URL'
fi

git_who_tmp="$(mktemp)"
if ! _curl "$git_who_url" --output "$git_who_tmp"; then
	fatal 'failed to download git-who'
fi

git_who_extracted_tmp="$(mktemp -d)"
if ! tar zxvf "$git_who_tmp" -C "$git_who_extracted_tmp" >/dev/null; then
	fatal 'failed to extract git-who'
fi
rm -f "$git_who_tmp"

git_who_path="$HOME"/.local/bin/git-who
install "$git_who_extracted_tmp"/linux_amd64/git-who "$git_who_path"
rm -rf "$git_who_extracted_tmp"
log_end

log_start 'installing Golang'
request_sudo rm -rf /usr/local/go
golang_tmp="$(mktemp --suffix .tar.gz)"
if ! go_version="$(_curl https://go.dev/VERSION?m=text | head -n 1)"; then
	fatal 'failed to get latest Golang version'
fi
if ! _curl "https://go.dev/dl/$go_version.linux-amd64.tar.gz" --output "$golang_tmp"; then
	fatal 'failed to download Golang'
fi
request_sudo tar --directory /usr/local --extract --gzip --file "$golang_tmp"
log_end

log_start 'installing kitty'
if ! kitty_url="$(get_release_url 'kovidgoyal/kitty' 'x86_64.txz')"; then
	fatal 'failed to get Kitty release URL'
fi
kitty_tmp="$(mktemp --suffix .txz)"
if ! _curl "$kitty_url" --output "$kitty_tmp"; then
	fatal 'failed to download Kitty'
fi
kitty_extracted_tmp="$(mktemp -d)"
if ! tar xvf "$kitty_tmp" -C "$kitty_extracted_tmp" >/dev/null; then
	fatal 'failed to extract Kitty'
fi
rm -f "$kitty_tmp"
kitty_path="$HOME"/.local/share/kitty
rm -rf "$kitty_path"
mv "$kitty_extracted_tmp" "$kitty_path"
_ln "$kitty_path"/bin/* "$HOME"/.local/bin
mkdir -p "$HOME"/.local/share/man/{man1,man5}
_ln "$kitty_path"/lib/kitty/shell-integration/zsh/completions/* "$(xdg_data)"/zsh-site-functions/_kitty
_ln "$kitty_path"/share/man/man1/* "$HOME"/.local/share/man/man1
_ln "$kitty_path"/share/man/man5/* "$HOME"/.local/share/man/man5
mkdir -p "$HOME"/.local/share/applications
cp "$kitty_path"/share/applications/kitty.desktop "$HOME"/.local/share/applications
sed -i "s|Icon=kitty|Icon=$HOME/.local/share/kitty/share/icons/hicolor/256x256/apps/kitty.png|g" "$HOME"/.local/share/applications/kitty*.desktop
sed -i "s|Exec=kitty|Exec=$HOME/.local/share/kitty/bin/kitty|g" ~/.local/share/applications/kitty*.desktop
rm -rf "$kitty_extracted_tmp"
echo 'kitty.desktop' >"$HOME"/.config/xdg-terminals.list
log_end

fonts_dir="$(xdg_data)"/fonts
if ! [ -d "$fonts_dir"/input ]; then
	mkdir -p "$fonts_dir"
	log_start 'installing Input fonts'
	input_tmp="$(mktemp)"
	input_url='https://input.djr.com/build/?basic=1&fontSelection=whole&a=0&g=0&i=0&l=0&zero=0&asterisk=0&lineHeight=1.2&accept=I+do'
	if ! _curl "$input_url" --output "$input_tmp"; then
		fatal 'failed to download Input fonts'
	fi
	input_extracted_tmp="$(mktemp -d)"
	if ! unzip "$input_tmp" -d "$input_extracted_tmp"; then
		fatal 'failed to extract Input fonts'
	fi
	mkdir -p "$fonts_dir"/input
	if ! mv "$input_extracted_tmp"/Input_Fonts/*/ "$fonts_dir"/input; then
		fatal 'failed to move Input fonts into place'
	fi
	rm -rf "$input_tmp" "$input_extracted_tmp"
	if ! fc-cache "$fonts_dir"/input; then
		warn 'failed to generate font caches, font will not be available until next login'
	fi
	log_end
fi

log_start 'installing shfmt'
if ! install_binary_from_github_release 'shfmt' 'mvdan/sh' 'linux_amd64'; then
	fatal 'failed to install shfmt'
fi
log_end

log_start 'installing Bitwarden CLI'
bw_tmp="$(mktemp)"
if ! _curl 'https://vault.bitwarden.com/download/?app=cli&platform=linux' --output "$bw_tmp"; then
	fatal 'failed to download Bitwarden CLI'
fi

bw_extracted_tmp="$(mktemp -d)"
if ! unzip "$bw_tmp" -d "$bw_extracted_tmp" >/dev/null; then
	fatal 'failed to unzip Bitwarden CLI'
fi
rm -f "$bw_tmp"

bw_path="$HOME"/.local/bin/bw
install "$bw_extracted_tmp"/bw "$bw_path"
rm -rf "$bw_extracted_tmp"
log_end

log_start 'installing NextCloud'
if ! install_binary_from_github_release 'nextcloud' 'nextcloud-releases/desktop' 'x86_64.AppImage'; then
	fatal 'failed to install NextCloud'
fi
log_end

log_start 'installing restic'
if ! restic_url="$(get_release_url 'restic/restic' '_linux_amd64.bz2')"; then
	fatal 'failed to get restic release URL'
fi
restic_tmp="$(mktemp --suffix .bz2)"
if ! _curl "$restic_url" --output "$restic_tmp"; then
	fatal 'failed to download restic'
fi
restic_extracted_tmp="${restic_tmp%.bz2}"
if ! bunzip2 "$restic_tmp" >/dev/null; then
	fatal 'failed to extract restic'
fi
rm -f "$restic_tmp"
restic_path="$HOME"/.local/bin/restic
install "$restic_extracted_tmp" "$restic_path"
rm -rf "$restic_extracted_tmp"
log_end

log_start 'installing uv'
if ! uv_url="$(get_release_url 'astral-sh/uv' 'uv-x86_64-unknown-linux-gnu.tar.gz')"; then
	fatal 'failed to get uv release URL'
fi

uv_tmp="$(mktemp)"
if ! _curl "$uv_url" --output "$uv_tmp"; then
	fatal 'failed to download uv'
fi

uv_extracted_tmp="$(mktemp -d)"
if ! tar zxvf "$uv_tmp" --strip-components 1 -C "$uv_extracted_tmp" >/dev/null; then
	fatal 'failed to extract uv'
fi
rm -f "$uv_tmp"

install "$uv_extracted_tmp"/{uv,uvx} "$HOME"/.local/bin
rm -rf "$uv_extracted_tmp"
log_end

log_start 'installing websocat'
if ! install_binary_from_github_release 'websocat' 'vi/websocat' 'x86_64-unknown-linux-musl'; then
	fatal 'failed to install websocat'
fi
log_end

log_start 'installing yt-dlp'
if ! install_binary_from_github_release 'yt-dlp' 'yt-dlp/yt-dlp' '_linux'; then
	fatal 'failed to install yt-dlp'
fi
log_end

log_start 'installing YubiKey Manager'
install_binary_from_url 'yubikey-manager' 'https://developers.yubico.com/yubikey-manager-qt/Releases/yubikey-manager-qt-latest-linux.AppImage'
log_end

if is_ubuntu; then
	log_start 'installing bat'
	if ! install_deb_from_github_release 'sharkdp/bat' '_amd64.deb'; then
		fatal 'failed to install bat'
	fi
	# Tell apt to not upgrade bat using the repository version
	if ! request_sudo apt-mark hold bat; then
		warn 'failed to hold bat, apt upgrade may override its installation'
	fi
	log_end

	log_start 'installing Bitwarden'
	if ! install_deb_from_url 'https://bitwarden.com/download/?app=desktop&platform=linux&variant=deb'; then
		fatal 'failed to install Bitwarden'
	fi
	log_end

	log_start 'installing darkman'
	if command -v scdoc >/dev/null; then
		darkman_tmp="$(mktemp -d)"
		if ! git clone https://gitlab.com/WhyNotHugo/darkman.git "$darkman_tmp" || ! cd "$darkman_tmp"; then
			fatal 'failed to clone darkman repository'
		fi
		if ! make || ! request_sudo make install; then
			fatal 'failed to install darkman'
		fi
		rm -rf "$darkman_tmp"
	else
		warn 'skipping darkman installation because scdoc is not installed'
	fi
	log_end

	log_start 'installing DBeaver'
	if ! install_deb_from_github_release 'dbeaver/dbeaver' '_amd64.deb'; then
		fatal 'failed to install DBeaver'
	fi
	log_end

	log_start 'installing git-delta'
	if ! install_deb_from_github_release 'dandavison/delta' '_amd64.deb'; then
		fatal 'failed to install git-delta'
	fi
	log_end

	log_start 'installing glow'
	if ! install_deb_from_github_release 'charmbracelet/glow' '_amd64.deb'; then
		fatal 'failed to install glow'
	fi
	log_end

	log_start 'installing go-hass-agent'
	if ! install_deb_from_github_release 'joshuar/go-hass-agent' '_amd64.deb'; then
		fatal 'failed to install go-hass-agent'
	fi
	mkdir -p "$HOME"/.config/go-hass-agent/scripts
	_ln "$_dir"/../config/go-hass-agent/audio-output "$HOME"/.config/go-hass-agent/scripts
	_ln "$_dir"/../config/go-hass-agent/webcam-in-use "$HOME"/.config/go-hass-agent/scripts
	log_end

	log_start 'installing Hugo'
	if ! install_deb_from_github_release 'gohugoio/hugo' 'linux-amd64.deb'; then
		fatal 'failed to install Hugo'
	fi
	log_end

	log_start 'installing hyperfine'
	if ! install_deb_from_github_release 'sharkdp/hyperfine' '_amd64.deb'; then
		fatal 'failed to install hyperfine'
	fi
	log_end

	log_start 'installing Obsidian'
	if ! install_deb_from_github_release 'obsidianmd/obsidian-releases' '_amd64.deb'; then
		fatal 'failed to install Obsidian'
	fi
	log_end

	log_start 'removing no-longer-needed software'
	request_sudo apt-get remove --yes --autoremove jan &>/dev/null || true
	log_end
fi

log_end
