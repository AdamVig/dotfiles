#!/usr/bin/env bash

_dir="$(dirname "$(realpath "${BASH_SOURCE[0]}")")"

# shellcheck source=./lib/helpers
source "$_dir"/helpers

log() {
	log_with_component 'linux software' "$@"
}

log_start 'installing Linux distribution-agnostic software'

log_start 'installing Calibre'
if ! calibre_url="$(get_release_url 'kovidgoyal/calibre' 'x86_64.txz')"; then
	fatal 'failed to get Calibre release URL'
fi
calibre_tmp="$(mktemp --suffix .txz)"
if ! _curl "$calibre_url" --output "$calibre_tmp"; then
	fatal 'failed to download Calibre'
fi
calibre_extracted_tmp="$(mktemp -d)"
if ! tar xvf "$calibre_tmp" -C "$calibre_extracted_tmp" >/dev/null; then
	fatal 'failed to extract Calibre'
fi
rm -f "$calibre_tmp"
calibre_path="$HOME"/.local/share/calibre
rm -rf "$calibre_path"
mv "$calibre_extracted_tmp" "$calibre_path"
for f in "$calibre_path"/*; do
	if [ -x "$f" ]; then
		_ln "$f" "$HOME"/.local/bin
	fi
done
rm -rf "$calibre_extracted_tmp"
log_end

log_start 'installing DigiKam'
if ! digikam_version="$(_curl 'https://invent.kde.org/api/v4/projects/graphics%2Fdigikam/repository/tags' |
	jq --exit-status --raw-output 'map(select(.name | test("^v[0-9]+.[0-9]+.[0-9]+$"))) | first | .name | ltrimstr("v")')"; then
	fatal 'failed to get DigiKam version'
fi

digikam_url="https://download.kde.org/stable/digikam/${digikam_version}/digiKam-${digikam_version}-x86-64.appimage"
if ! install_binary_from_url 'DigiKam' "$digikam_url"; then
	fatal 'failed to install DigiKam'
fi
log_end

fonts_dir="$(xdg_data)"/fonts
if ! [ -d "$fonts_dir"/source-code-pro ]; then
	mkdir -p "$fonts_dir"
	log_start 'installing Source Code Pro'
	if ! git clone --depth 1 --branch release https://github.com/adobe-fonts/source-code-pro.git "$fonts_dir"/source-code-pro; then
		fatal 'failed to clone Git repository'
	fi
	if ! fc-cache "$fonts_dir"/source-code-pro; then
		warn 'failed to generate font caches, font will not be available until next login'
	fi
	log_end
fi

log_start 'installing shfmt'
if ! install_binary_from_github_release 'shfmt' 'mvdan/sh' 'linux_amd64'; then
	fatal 'failed to install shfmt'
fi
log_end

log_start 'installing scc'
if ! scc_url="$(get_release_url 'boyter/scc' 'Linux_x86_64')"; then
	fatal 'failed to get scc release URL'
fi

scc_tmp="$(mktemp)"
if ! _curl "$scc_url" --output "$scc_tmp"; then
	fatal 'failed to download scc'
fi

scc_extracted_tmp="$(mktemp -d)"
if ! tar zxvf "$scc_tmp" -C "$scc_extracted_tmp" >/dev/null; then
	fatal 'failed to unzip scc'
fi
rm -f "$scc_tmp"

scc_path="$HOME"/.local/bin/scc
mv "$scc_extracted_tmp"/scc "$scc_path"
rm -rf "$scc_extracted_tmp"

chmod +x "$scc_path"
log_end

log_start 'installing Slack CLI'
if ! install_binary_from_url 'slack' 'https://raw.githubusercontent.com/rockymadden/slack-cli/master/src/slack'; then
	fatal 'failed to install Slack CLI'
fi
log_end

log_start 'installing GoldenCheetah'
if ! install_binary_from_github_release 'GoldenCheetah' 'GoldenCheetah/GoldenCheetah' '_amd64_Linux.AppImage'; then
	fatal 'failed to install GoldenCheetah'
fi
log_end

log_start 'installing Hub'
if ! hub_url="$(get_release_url 'github/hub' 'linux-amd64')"; then
	fatal 'failed to get Hub release URL'
fi
hub_tmp="$(mktemp --suffix .tgz)"
if ! _curl "$hub_url" --output "$hub_tmp"; then
	fatal 'failed to download Hub'
fi
hub_extracted_tmp="$(mktemp -d)"
if ! tar zxvf "$hub_tmp" -C "$hub_extracted_tmp" --strip-components=1 >/dev/null; then
	fatal 'failed to extract Hub'
fi
rm -f "$hub_tmp"
hub_path="$HOME"/.local/bin/hub
install -D "$hub_extracted_tmp"/bin/hub "$hub_path"
install -D --target-directory="$HOME"/.local/share/man/man1 "$hub_extracted_tmp"/share/man/*/*.1
hub_completion_dir="$HOME"/.local/share/hub
install -D "$hub_extracted_tmp"/etc/hub.zsh_completion "$hub_completion_dir"/_hub
rm -rf "$hub_extracted_tmp"
log_end

log_start 'installing Bitwarden'
if ! install_binary_from_url 'Bitwarden' 'https://vault.bitwarden.com/download/?app=desktop&platform=linux&variant=appimage'; then
	fatal 'failed to install Bitwarden'
fi
log_end

log_start 'installing restic'
if ! restic_url="$(get_release_url 'restic/restic' '_linux_amd64.bz2')"; then
	fatal 'failed to get restic release URL'
fi
restic_tmp="$(mktemp --suffix .bz2)"
if ! _curl "$restic_url" --output "$restic_tmp"; then
	fatal 'failed to download restic'
fi
restic_extracted_tmp="${restic_tmp%.bz2}"
if ! bunzip2 "$restic_tmp" >/dev/null; then
	fatal 'failed to extract restic'
fi
rm -f "$restic_tmp"
restic_path="$HOME"/.local/bin/restic
install "$restic_extracted_tmp" "$restic_path"
rm -rf "$restic_extracted_tmp"
log_end

log_start 'installing websocat'
if ! install_binary_from_github_release 'websocat' 'vi/websocat' 'x86_64-unknown-linux-musl'; then
	fatal 'failed to install websocat'
fi
log_end

log_start 'installing YubiKey Manager'
install_binary_from_url 'yubikey-manager' 'https://developers.yubico.com/yubikey-manager-qt/Releases/yubikey-manager-qt-latest-linux.AppImage'
log_end

log_start 'removing legacy software'
rm -f "$HOME"/.local/bin/ncspot "$HOME"/.local/bin/*.AppImage
log_end

log_end
