#!/usr/bin/env bash

_dir="$(dirname "$(realpath "${BASH_SOURCE[0]}")")"

# shellcheck source=./lib/helpers
source "$_dir"/helpers

log() {
	log_with_component 'linux software' "$@"
}

log_start 'installing Linux distribution-agnostic software'

log_start 'removing no-longer-needed software'
rm -vf "$HOME"/.local/bin/{balenaEtcher,DigiKam,GoldenCheetah}
request_sudo rm -vf /usr/local/bin/{restic,resticprofile}
log_end

log_start 'installing b2'
if ! install_binary_from_github_release 'b2' 'Backblaze/B2_Command_Line_Tool' 'linux'; then
	fatal 'failed to install b2'
fi
log_end

log_start 'installing Calibre'
if ! calibre_url="$(get_release_url 'kovidgoyal/calibre' 'x86_64.txz')"; then
	fatal 'failed to get Calibre release URL'
fi
calibre_tmp="$(mktemp --suffix .txz)"
if ! _curl "$calibre_url" --output "$calibre_tmp"; then
	fatal 'failed to download Calibre'
fi
calibre_extracted_tmp="$(mktemp -d)"
if ! tar xvf "$calibre_tmp" -C "$calibre_extracted_tmp" >/dev/null; then
	fatal 'failed to extract Calibre'
fi
rm -f "$calibre_tmp"
calibre_path="$HOME"/.local/share/calibre
rm -rf "$calibre_path"
mv "$calibre_extracted_tmp" "$calibre_path"
for f in "$calibre_path"/*; do
	if [ -x "$f" ]; then
		_ln "$f" "$HOME"/.local/bin
	fi
done
rm -rf "$calibre_extracted_tmp"
log_end

log_start 'installing difftastic'
if ! difftastic_url="$(get_release_url 'Wilfred/difftastic' 'difft-x86_64-unknown-linux-gnu.tar.gz')"; then
	fatal 'failed to get difftastic release URL'
fi

difftastic_tmp="$(mktemp)"
if ! _curl "$difftastic_url" --output "$difftastic_tmp"; then
	fatal 'failed to download difftastic'
fi

difftastic_extracted_tmp="$(mktemp -d)"
if ! tar zxvf "$difftastic_tmp" -C "$difftastic_extracted_tmp" >/dev/null; then
	fatal 'failed to extract difftastic'
fi
rm -f "$difftastic_tmp"

difftastic_path="$HOME"/.local/bin/difft
install "$difftastic_extracted_tmp"/difft "$difftastic_path"
rm -rf "$difftastic_extracted_tmp"
log_end

log_start 'installing git-who'
if ! git_who_url="$(get_release_url 'sinclairtarget/git-who' '_linux_amd64.tar.gz')"; then
	fatal 'failed to get git-who release URL'
fi

git_who_tmp="$(mktemp)"
if ! _curl "$git_who_url" --output "$git_who_tmp"; then
	fatal 'failed to download git-who'
fi

git_who_extracted_tmp="$(mktemp -d)"
if ! tar zxvf "$git_who_tmp" -C "$git_who_extracted_tmp" >/dev/null; then
	fatal 'failed to extract git-who'
fi
rm -f "$git_who_tmp"

git_who_path="$HOME"/.local/bin/git-who
install "$git_who_extracted_tmp"/linux_amd64/git-who "$git_who_path"
rm -rf "$git_who_extracted_tmp"
log_end

log_start 'installing kitty'
if ! kitty_url="$(get_release_url 'kovidgoyal/kitty' 'x86_64.txz')"; then
	fatal 'failed to get Kitty release URL'
fi
kitty_tmp="$(mktemp --suffix .txz)"
if ! _curl "$kitty_url" --output "$kitty_tmp"; then
	fatal 'failed to download Kitty'
fi
kitty_extracted_tmp="$(mktemp -d)"
if ! tar xvf "$kitty_tmp" -C "$kitty_extracted_tmp" >/dev/null; then
	fatal 'failed to extract Kitty'
fi
rm -f "$kitty_tmp"
kitty_path="$HOME"/.local/share/kitty
rm -rf "$kitty_path"
mv "$kitty_extracted_tmp" "$kitty_path"
_ln "$kitty_path"/bin/* "$HOME"/.local/bin
mkdir -p "$HOME"/.local/share/man/{man1,man5}
_ln "$kitty_path"/lib/kitty/shell-integration/zsh/completions/* "$(xdg_data)"/zsh-site-functions
_ln "$kitty_path"/share/man/man1/* "$HOME"/.local/share/man/man1
_ln "$kitty_path"/share/man/man5/* "$HOME"/.local/share/man/man5
_ln "$kitty_path"/share/applications/* "$HOME"/.local/share/applications
rm -rf "$kitty_extracted_tmp"
log_end

fonts_dir="$(xdg_data)"/fonts
if ! [ -d "$fonts_dir"/input ]; then
	mkdir -p "$fonts_dir"
	log_start 'installing Input fonts'
	input_tmp="$(mktemp)"
	input_url='https://input.djr.com/build/?basic=1&fontSelection=whole&a=0&g=0&i=0&l=0&zero=0&asterisk=0&lineHeight=1.2&accept=I+do'
	if ! _curl "$input_url" --output "$input_tmp"; then
		fatal 'failed to download Input fonts'
	fi
	input_extracted_tmp="$(mktemp -d)"
	if ! unzip "$input_tmp" -d "$input_extracted_tmp"; then
		fatal 'failed to extract Input fonts'
	fi
	mkdir -p "$fonts_dir"/input
	if ! mv "$input_extracted_tmp"/Input_Fonts/*/ "$fonts_dir"/input; then
		fatal 'failed to move Input fonts into place'
	fi
	rm -rf "$input_tmp" "$input_extracted_tmp"
	if ! fc-cache "$fonts_dir"/input; then
		warppn 'failed to generate font caches, font will not be available until next login'
	fi
	log_end
fi

log_start 'installing shfmt'
if ! install_binary_from_github_release 'shfmt' 'mvdan/sh' 'linux_amd64'; then
	fatal 'failed to install shfmt'
fi
log_end

log_start 'installing scc'
if ! scc_url="$(get_release_url 'boyter/scc' 'Linux_x86_64.tar.gz')"; then
	fatal 'failed to get scc release URL'
fi

scc_tmp="$(mktemp)"
if ! _curl "$scc_url" --output "$scc_tmp"; then
	fatal 'failed to download scc'
fi

scc_extracted_tmp="$(mktemp -d)"
if ! tar zxvf "$scc_tmp" -C "$scc_extracted_tmp" >/dev/null; then
	fatal 'failed to unzip scc'
fi
rm -f "$scc_tmp"

scc_path="$HOME"/.local/bin/scc
install "$scc_extracted_tmp"/scc "$scc_path"
rm -rf "$scc_extracted_tmp"
log_end

log_start 'installing Bitwarden'
if ! install_binary_from_url 'Bitwarden' 'https://vault.bitwarden.com/download/?app=desktop&platform=linux&variant=appimage'; then
	fatal 'failed to install Bitwarden'
fi
log_end

log_start 'installing Bitwarden CLI'
bw_tmp="$(mktemp)"
if ! _curl 'https://vault.bitwarden.com/download/?app=cli&platform=linux' --output "$bw_tmp"; then
	fatal 'failed to download Bitwarden CLI'
fi

bw_extracted_tmp="$(mktemp -d)"
if ! unzip "$bw_tmp" -d "$bw_extracted_tmp" >/dev/null; then
	fatal 'failed to unzip Bitwarden CLI'
fi
rm -f "$bw_tmp"

bw_path="$HOME"/.local/bin/bw
install "$bw_extracted_tmp"/bw "$bw_path"
rm -rf "$bw_extracted_tmp"
log_end

log_start 'installing NextCloud'
if ! install_binary_from_github_release 'nextcloud' 'nextcloud-releases/desktop' 'x86_64.AppImage'; then
	fatal 'failed to install NextCloud'
fi
log_end

log_start 'installing restic'
if ! restic_url="$(get_release_url 'restic/restic' '_linux_amd64.bz2')"; then
	fatal 'failed to get restic release URL'
fi
restic_tmp="$(mktemp --suffix .bz2)"
if ! _curl "$restic_url" --output "$restic_tmp"; then
	fatal 'failed to download restic'
fi
restic_extracted_tmp="${restic_tmp%.bz2}"
if ! bunzip2 "$restic_tmp" >/dev/null; then
	fatal 'failed to extract restic'
fi
rm -f "$restic_tmp"
restic_path="$HOME"/.local/bin/restic
install "$restic_extracted_tmp" "$restic_path"
rm -rf "$restic_extracted_tmp"
log_end

log_start 'installing websocat'
if ! install_binary_from_github_release 'websocat' 'vi/websocat' 'x86_64-unknown-linux-musl'; then
	fatal 'failed to install websocat'
fi
log_end

log_start 'installing yt-dlp'
if ! install_binary_from_github_release 'yt-dlp' 'yt-dlp/yt-dlp' '_linux'; then
	fatal 'failed to install yt-dlp'
fi
log_end

log_start 'installing YubiKey Manager'
install_binary_from_url 'yubikey-manager' 'https://developers.yubico.com/yubikey-manager-qt/Releases/yubikey-manager-qt-latest-linux.AppImage'
log_end

log_end
