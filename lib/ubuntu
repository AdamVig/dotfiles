#!/usr/bin/env bash

_dir="$(dirname "$(realpath "${BASH_SOURCE[0]}")")"

# shellcheck source=./lib/helpers
source "$_dir"/helpers

log() {
	log_with_component ubuntu "$@"
}

# shellcheck disable=SC2119
request_sudo

log_start 'setting up Ubuntu'

if command -v snap >/dev/null; then
	log_start 'disabling snaps'
	request_sudo apt autoremove --purge --yes snapd
	request_sudo apt-mark hold snapd
	rm -rf "$HOME"/snap
	log_end
fi

log_start 'installing GitHub CLI completions'
install -D <(gh completion --shell zsh) "$HOME"/.local/share/gh/_gh
log_end

log_start 'linking fdfind to fd'
_ln /usr/bin/fdfind "$HOME"/.local/bin/fd
log_end

log_start 'putting WirePlumber device disabling configuration in place'
mkdir -p "$(xdg_config)"/wireplumber/main.lua.d
_ln "$_dir"/../config/wireplumber-disable-devices.lua "$(xdg_config)"/wireplumber/main.lua.d/99-disable-devices.lua
log_end

log_start 'updating user directories'
# shellcheck disable=SC2016
echo 'XDG_DESKTOP_DIR="$HOME/desktop"
XDG_DOWNLOAD_DIR="$HOME/downloads"
# XDG_TEMPLATES_DIR="$HOME/templates"
# XDG_PUBLICSHARE_DIR="$HOME/public"
# XDG_DOCUMENTS_DIR="$HOME/documents"
# XDG_MUSIC_DIR="$HOME/music"
XDG_PICTURES_DIR="$HOME/pictures"
# XDG_VIDEOS_DIR="$HOME/videos"' >"$HOME"/.config/user-dirs.dirs
# Prevent xdg-user-dirs-update from changing ~/.config/user-dirs.conf
echo 'enabled=false' >~/.config/user-dirs.conf
log_end

# TODO remove once executed on all computers
log_start 'removing GNOME scaling factor override'
request_sudo rm -f /usr/share/glib-2.0/schemas/30_scaling-factor.gschema.override
request_sudo glib-compile-schemas /usr/share/glib-2.0/schemas
log_end

if ! grep --quiet "logo=''" /etc/gdm3/greeter.dconf-defaults; then
	log_start 'disabling Ubuntu logo on login screen'
	request_sudo sed -i "s|#.*logo=.*|logo=''|" /etc/gdm3/greeter.dconf-defaults
	log_end
fi
if ! grep --quiet "clock-format=''" /etc/gdm3/greeter.dconf-defaults; then
	log_start 'setting login screen to 12-hour time'
	echo "[org/gnome/desktop/interface]
clock-format='12h'" | request_sudo tee /etc/gdm3/greeter.dconf-defaults >/dev/null
	log_end
fi

log_start 'disabling input language icon in system tray'
gsettings set org.freedesktop.ibus.panel show-icon-on-systray false
log_end

log_start 'configuring keyboard'
# Laptop or other portable device (https://gitlab.com/debiants/laptop-detect)
if [[ -e /sys/devices/virtual/dmi/id/chassis_type ]] && chassis_type="$(</sys/devices/virtual/dmi/id/chassis_type)" &&
	[[ $chassis_type == 8 || $chassis_type == 9 || $chassis_type == 10 || $chassis_type == 11 ]]; then
	# 1. Map right alt key to the "compose" key for special characters
	# 2. Make caps lock work as escape
	gsettings set org.gnome.desktop.input-sources xkb-options "['compose:ralt', 'caps:escape']"
else
	# Map right alt key to the "compose" key for special characters
	gsettings set org.gnome.desktop.input-sources xkb-options "['compose:ralt']"
fi
log_end

home_assistant_daemon_unit_path="$(xdg_config)"/systemd/user/home-assistant-daemon.service
if ! [ -f "$home_assistant_daemon_unit_path" ]; then
	home_assistant_daemon_environment_file_path="$(xdg_config)"/home-assistant-daemon.env
	if ! [ -f "$home_assistant_daemon_environment_file_path" ]; then
		log_start 'creating Home Assistant daemon environment file'
		echo '# Home Assistant daemon environment variables, in the format of a Systemd unit EnvironmentFile
# Hostname of Home Assistant instance
HOME_ASSISTANT_HOST=example.com
# API token for Home Assistant instance
HOME_ASSISTANT_TOKEN=
' >"$home_assistant_daemon_environment_file_path"
		log_end
		warn "Home Assistant daemon configuration created at $home_assistant_daemon_environment_file_path, open the file and fill in the values"
	fi

	log_start 'creating Home Assistant daemon Systemd unit'
	mkdir -p "$(xdg_config)"/systemd/user
	echo "[Unit]
Description=\"Home Assistant Daemon\"

[Service]
EnvironmentFile=$home_assistant_daemon_environment_file_path
ExecStart=$(realpath "$_dir"/../bin/home-assistant-daemon)
Restart=on-failure
# Wait two minutes before attempting to restart
RestartSec=2min

[Install]
WantedBy=default.target
" >"$home_assistant_daemon_unit_path"
	systemctl --user daemon-reload
	log_end
fi

if ! systemctl --user is-enabled --quiet home-assistant-daemon.service; then
	log_start 'setting up Home Assistant daemon'
	systemctl --user enable --now home-assistant-daemon.service
	log_end
fi

calibre_desktop_path="$HOME"/.local/share/applications/calibre.desktop
if ! [ -f "$calibre_desktop_path" ]; then
	log_start 'installing Calibre desktop file'
	mkdir -p "$(dirname "$calibre_desktop_path")"
	# From https://github.com/kovidgoyal/calibre/blob/3df6200ca7cf5499a496ab165d12d6e7294830fc/src/calibre/linux.py#L1123-L1135
	echo "[Desktop Entry]
Version=1.0
Type=Application
Name=calibre
GenericName=E-book library management
Comment=E-book library management: Convert, view, share, catalogue all your e-books
TryExec=calibre
Exec=calibre %U
Icon=calibre-gui
Categories=Office;
X-GNOME-UsesNotifications=true
" >"$calibre_desktop_path"
	log_end
fi

log_start 'adding user to the video group'
# For brightnessctl
request_sudo usermod --append --groups input,video "$USER"
log_end

log_start 'adding user to the Docker group'
request_sudo usermod --append --groups docker "$USER"
log_end

if ! [ -f /etc/sudoers.d/disable-sudo-as-admin-successful ]; then
	log_start 'preventing creation of ~/.sudo_as_admin_successful'
	rm -f "$HOME"/.sudo_as_admin_successful
	echo '# Disable creation of ~/.sudo_as_admin_successful
Defaults !admin_flag' |
		(request_sudo su -c 'EDITOR="tee" visudo -f /etc/sudoers.d/disable-sudo-as-admin-successful' >/dev/null)
	log_end
fi

if ! systemctl --user is-enabled --quiet appimaged.service; then
	log_start 'setting up AppImage support'
	mkdir -p "$HOME"/applications
	# From https://github.com/probonopd/go-appimage/blob/master/src/appimaged/README.md
	wget -c https://github.com/"$(wget -q https://github.com/probonopd/go-appimage/releases/expanded_assets/continuous -O - | grep "appimaged-.*-x86_64.AppImage" | head -n 1 | cut -d '"' -f 2)" -P "$HOME"/applications
	chmod +x "$HOME"/applications/appimaged-*.AppImage
	# shellcheck disable=SC2211
	"$HOME"/applications/appimaged-*.AppImage
	log_end
fi

if ! [ -f "$(xdg_config)"/darkman/config.yaml ]; then
	log_start 'creating darkman configuration'
	mkdir -p "$(xdg_config)"/darkman
	echo 'lat: 52.3
lng: 4.8
' >"$(xdg_config)"/darkman/config.yaml
	warn "created darkman configuration at $(xdg_config)/darkman/config.yaml"
	warn 'you must manually configure the lat/lng for automatic transitions!'
	log_end
fi

log_start 'writing darkman hook scripts'
mkdir -p "$(xdg_data)"/{light,dark}-mode.d/
echo '#!/usr/bin/env bash
gsettings set org.gnome.desktop.interface color-scheme prefer-light
# Catppuccin Latte Crust
gsettings set org.gnome.desktop.background primary-color "#dce0e8"
# Catppuccin Latte Mantle
gsettings set org.gnome.desktop.background secondary-color "#e6e9ef"
' >"$(xdg_data)"/light-mode.d/gnome
echo '#!/usr/bin/env bash
gsettings set org.gnome.desktop.interface color-scheme prefer-dark
# Catppuccin Macchiato Crust
gsettings set org.gnome.desktop.background primary-color "#181926"
# Catppuccin Macchiato Mantle
gsettings set org.gnome.desktop.background secondary-color "#1e2030"
' >"$(xdg_data)"/dark-mode.d/gnome
echo '#!/usr/bin/env bash
git config --global delta.features catppuccin-latte
' >"$(xdg_data)"/light-mode.d/delta
echo '#!/usr/bin/env bash
git config --global delta.features catppuccin-macchiato
' >"$(xdg_data)"/dark-mode.d/delta
chmod +x "$(xdg_data)"/{light,dark}-mode.d/*
log_end

log_start 'configuring autostart applications'
autostart_dir="$HOME"/.config/autostart
mkdir -p "$autostart_dir"
echo "[Desktop Entry]
Name=Nextcloud
GenericName=File Synchronizer
Exec=$HOME/.local/bin/nextcloud --background
Terminal=false
Icon=Nextcloud
Categories=Network
Type=Application
StartupNotify=false
X-GNOME-Autostart-enabled=true
X-GNOME-Autostart-Delay=5" >"$autostart_dir"/Nextcloud.desktop
log_end

log_start 'setting up Flatpak installer'
echo '[Desktop Entry]
MimeType=application/vnd.flatpak.ref;
Name=Flatpak Installer
Exec=flatpak install %U
Type=Application
Terminal=true
NoDisplay=true' > "$HOME"/.local/share/applications/flatpak-installer.desktop
log_end

log_end
