#!/usr/bin/env bash

_dir="$(dirname "$(realpath "${BASH_SOURCE[0]}")")"

# shellcheck source=./lib/helpers
source "$_dir"/helpers

# shellcheck disable=SC2119
request-sudo

# $1: string that uniquely identifies repository
is_repository_configured() {
	grep --quiet --recursive "$1" /etc/apt/sources.list /etc/apt/sources.list.d/
}

# $1: human-readable name, will be used to build filename (<name>.list)
# $2: repository configuration string
add_repository() {
	echo "$2" | request-sudo tee /etc/apt/sources.list.d/"$1".list >/dev/null
}

# $1: URL
add_key() {
	local url="${1:-}"
	if ! _curl "$url" | sudo apt-key add -; then
		fatal 'failed to add key'
	fi
}

message "setting up Ubuntu..."

if ! is_repository_configured 'vscode'; then
	message '  %s' 'adding Visual Studio Code repository...'
	add_key https://packages.microsoft.com/keys/microsoft.asc
	add_repository 'vscode' 'deb [arch=amd64] https://packages.microsoft.com/repos/vscode stable main'
	message '  %s' 'done adding Visual Studio Code repository.'
fi

if ! is_repository_configured 'spotify'; then
	message '  %s' 'adding Spotify repository...'
	add_key https://download.spotify.com/debian/pubkey_0D811D58.gpg
	add_repository 'spotify' 'deb http://repository.spotify.com stable non-free'
	message '  %s' 'done adding Spotify repository.'
fi

if ! is_repository_configured 'slack'; then
	message '  %s' 'adding Slack repository...'
	add_key https://packagecloud.io/slacktechnologies/slack/gpgkey
	add_repository 'slack' 'deb https://packagecloud.io/slacktechnologies/slack/ubuntu/ bionic main'
	message '  %s' 'done adding Slack repository.'
fi

if ! is_repository_configured 'signal'; then
	message '  %s' 'adding Signal repository...'
	add_key https://updates.signal.org/desktop/apt/keys.asc
	add_repository 'signal' 'deb [arch=amd64] https://updates.signal.org/desktop/apt xenial main'
	message '  %s' 'done adding Signal repository.'
fi

if ! is_repository_configured 'nextcloud'; then
	message '  %s' 'adding Nextcloud repository...'
	request-sudo add-apt-repository --yes ppa:nextcloud-devs/client
	message '  %s' 'done adding Nextcloud repository.'
fi

if ! is_repository_configured 'diff-so-fancy'; then
	message '  %s' 'adding diff-so-fancy repository...'
	request-sudo add-apt-repository --yes ppa:aos1/diff-so-fancy
	message '  %s' 'done adding diff-so-fancy repository.'
fi

if ! is_repository_configured 'git-core'; then
	message '  %s' 'adding git repository...'
	request-sudo add-apt-repository --yes ppa:git-core/ppa
	message '  %s' 'done adding git repository.'
fi

if ! is_repository_configured 'azlux'; then
	message '  %s' 'adding broot repository...'
	add_key https://azlux.fr/repo.gpg.key
	add_repository 'broot' 'deb http://packages.azlux.fr/debian/ buster main'
	message '  %s' 'done adding broot repository.'
fi

if ! is_repository_configured 'lutris'; then
	message '  %s' 'adding lutris repository...'
	request-sudo add-apt-repository --yes ppa:lutris-team/lutris
	message '  %s' 'done adding lutris repository.'
fi

if ! is_repository_configured 'etcher'; then
	message '  %s' 'adding etcher repository...'
	add_repository 'etcher' 'deb https://deb.etcher.io stable etcher'
	request-sudo apt-key adv --keyserver hkps://keyserver.ubuntu.com:443 --recv-keys 379CE192D401AB61
	message '  %s' 'done adding etcher repository.'
fi

if ! is_repository_configured 'figma'; then
	message '  %s' 'adding figma repository...'
	request-sudo add-apt-repository --yes ppa:chrdevs/figma
	message '  %s' 'done adding figma repository.'
fi

if ! is_repository_configured 'mpv-tests'; then
	message '  %s' 'adding mpv repository...'
	request-sudo add-apt-repository --yes ppa:mc3man/mpv-tests
	message '  %s' 'done adding mpv repository.'
fi

if ! is_repository_configured 'ubuntu-elisp'; then
	message '  %s' 'adding Ubuntu Emacs snapshot repository...'
	request-sudo add-apt-repository --yes ppa:ubuntu-elisp/ppa
	message '  %s' 'done adding Ubuntu Emacs snapshot repository.'
fi

if ! is_repository_configured 'xournal'; then
	message '  %s' 'adding Xournal++ repository...'
	request-sudo add-apt-repository --yes ppa:apandada1/xournalpp-stable
	message '  %s' 'done adding Xournal++ repository.'
fi

if ! is_repository_configured 'copyq'; then
	message '  %s' 'adding CopyQ repository...'
	request-sudo add-apt-repository --yes ppa:hluk/copyq
	message '  %s' 'done adding CopyQ repository.'
fi

if ! is_repository_configured 'cli.github.com'; then
	message '  %s' 'adding GitHub CLI repository...'
	request-sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-key C99B11DEB97541F0
	request-sudo add-apt-repository --yes https://cli.github.com/packages
	message '  %s' 'done adding GitHub CLI repository.'
fi

message '  %s' 'updating lists...'
if request-sudo apt-get update >/dev/null; then
	message '  %s' 'done updating lists.'
else
	warn 'failed to update lists'
fi

message '  %s' 'upgrading packages...'
if request-sudo apt-get upgrade --yes --autoremove >/dev/null; then
	message '  %s' 'done upgrading packages.'
else
	warn 'failed to upgrade packages, continuing'
fi

declare -a packages=(
	# system dependencies
	apt-transport-https
	software-properties-common

	# default utilities
	gnupg
	openssh-server
	rsync
	wget

	# replacements of default utilities
	bat     # Better cat
	broot   # Better tree
	fd-find # Better find
	htop    # Better top
	httpie  # Better curl
	mosh    # Better ssh
	ripgrep # Better grep

	# command line tools
	expect   # Scripting tool for interactive programs
	fzf      # Fuzzy finder
	gh       # GitHub CLI
	gifsicle # Gif tool
	glow     # Markdown viewer
	graphviz # Graph visualization tool
	imagemagick
	ipcalc         # IP address calculator
	jq             # JSON processor
	magic-wormhole # Point-to-point file sharing
	nnn            # Command-line file browser
	p7zip
	pandoc
	playerctl         # Media player controller
	postgresql-client # PostgreSQL CLI
	scrot             # Screenshot capture tool
	tig               # Visual Git client
	tmux
	tree
	units # Unit conversion calculator
	unzip
	wmctrl  # X window manager control CLI
	x11vnc  # X server VNC
	xclip   # Clipboard CLI
	xsel    # Clipboard CLI
	xdotool # X input event generator
	xdg-utils
	xournalpp # Note taking tool
	wpasupplicant

	# shell
	bash
	zsh

	# programming languages
	golang
	php
	python3
	ruby
	rustc

	# programming language tools
	composer # PHP
	go-dep   # Golang
	python3-pip
	shellcheck # Shell script linter

	# applications
	arbtt # Automatic time tracker
	balena-etcher-electron
	chromium-browser
	code
	compton # Compositor for X
	copyq   # Clipboard manager
	docker.io
	emacs-snapshot
	figma-linux
	firefox
	flameshot # Screenshot tool
	gnome-shell-extension-impatience
	gnome-keyring # Secret manager
	i3            # Window manager
	i3blocks      # Status bar generator
	inkscape
	kdiff3 # Merge tool
	kitty  # GPU-accelerated terminal emulator
	libreoffice
	lutris
	meld # Comparison tool for version control, files, and directories
	mpv  # Media player
	# Nextcloud version pinned to avoid error: "nextcloud-desktop : Depends: qtbase-abi-5-12-8 but it is not installable"
	nautilus-nextcloud=2.6.4-1 # Nextcloud Nautilus integration (includes client)
	redshift                   # Screen color temperature adjustment tool
	rofi                       # Application launcher
	signal-desktop
	slack-desktop
	spotify-client
	steam
	vino # GNOME VNC server

	# fonts
	fonts-firacode
	fonts-noto
	fonts-noto-color-emoji
	fonts-open-sans
	fonts-roboto
)

message '  %s' 'installing packages...'
sudo apt-get install --yes "${packages[@]}"
message '  %s' 'done installing packages.'

message '  %s' 'updating snaps...'
if ! request-sudo snap refresh >/dev/null; then
	fatal 'failed to update snaps'
fi
message '  %s' 'done updating snaps.'

declare -a snaps=(
	'authy --beta'
	ffsend
	standard-notes
	yq
)

for snap_raw in "${snaps[@]}"; do
	read -ra snap <<<"$snap_raw"
	message '  %s' "installing snap '${snap[0]}'..."
	if ! request-sudo snap install "${snap[@]}"; then
		fatal 'failed to install'
	fi
	message '  %s' "done installing snap '${snap[0]}'."
done

message '  %s' 'installing GitHub CLI completions...'
install -D <(gh completion --shell zsh) "$HOME"/.local/share/gh/_gh
message '  %s' 'done installing GitHub CLI completions.'

message '  %s' 'installing Hugo...'
if ! hugo_url="$(get_release_url 'gohugoio/hugo' 'Linux-64bit.deb')"; then
	fatal 'failed to get Hugo release URL'
fi
hugo_tmp="$(mktemp --suffix .deb)"
if ! _curl "$hugo_url" --output "$hugo_tmp"; then
	fatal 'failed to download Hugo'
fi
if ! request-sudo apt-get install "$hugo_tmp"; then
	fatal 'failed to install Hugo'
fi
rm -f "$hugo_tmp"
message '  %s' 'done installing Hugo.'

message '  %s' 'installing hyperfine...'
if ! hyperfine_url="$(get_release_url 'sharkdp/hyperfine' '_amd64.deb')"; then
	fatal 'failed to get hyperfine release URL'
fi
hyperfine_tmp="$(mktemp --suffix .deb)"
if ! _curl "$hyperfine_url" --output "$hyperfine_tmp"; then
	fatal 'failed to download hyperfine'
fi
if ! request-sudo apt-get install "$hyperfine_tmp"; then
	fatal 'failed to install hyperfine'
fi
rm -f "$hyperfine_tmp"
message '  %s' 'done installing hyperfine.'

message '  %s' 'installing git-delta...'
if ! git_delta_url="$(get_release_url 'dandavison/delta' '_amd64.deb')"; then
	fatal 'failed to get git-delta release URL'
fi
git_delta_tmp="$(mktemp --suffix .deb)"
if ! _curl "$git_delta_url" --output "$git_delta_tmp"; then
	fatal 'failed to download git-delta'
fi
if ! request-sudo apt-get install "$git_delta_tmp"; then
	fatal 'failed to install git-delta'
fi
rm -f "$git_delta_tmp"
message '  %s' 'done installing git-delta.'

message '  %s' 'installing websocat...'
if ! websocat_url="$(get_release_url 'vi/websocat' '_ssl1.1_amd64.deb')"; then
	fatal 'failed to get websocat release URL'
fi
websocat_tmp="$(mktemp --suffix .deb)"
if ! _curl "$websocat_url" --output "$websocat_tmp"; then
	fatal 'failed to download websocat'
fi
if ! request-sudo apt-get install "$websocat_tmp"; then
	fatal 'failed to install websocat'
fi
rm -f "$websocat_tmp"
message '  %s' 'done installing websocat.'

message '  %s' 'linking batcat to bat...'
ln -sf /usr/bin/batcat "$HOME"/.local/bin/bat
message '  %s' 'done linking batcat to bat.'

message '  %s' 'linking fdfind to fd...'
ln -sf /usr/bin/fdfind "$HOME"/.local/bin/fd
message '  %s' 'done linking fdfind to fd.'

message '  %s' 'configuring Grub...'
message '    %s' 'disabling generation of recovery options...'
request-sudo sed -i 's|#GRUB_DISABLE_RECOVERY="true"|GRUB_DISABLE_RECOVERY="true"|' /etc/default/grub
message '    %s' 'done disabling generation of recovery options.'

grub_theme_dir=/boot/grub/themes/adamvig
if ! [ -f "$grub_theme_dir"/theme.txt ]; then
	message '    %s' 'linking theme...'
	request-sudo mkdir -p "$grub_theme_dir"
	request-sudo ln -sf "$_dir"/../config/grub-theme.txt "$grub_theme_dir"/theme.txt
	message '    %s' 'done linking theme.'
fi

grub_font_output_path="$grub_theme_dir"/opensans-regular.pf2
if ! [ -f "$grub_font_output_path" ]; then
	message '    %s' 'converting font...'
	opensans_path='/usr/share/fonts/truetype/open-sans/OpenSans-Regular.ttf'
	if ! request-sudo grub-mkfont --output "$grub_font_output_path" --size 36 "$opensans_path"; then
		fatal 'failed to convert font'
	fi
	message '    %s' 'done converting font.'
fi

grub_theme_variable="GRUB_THEME=$grub_theme_dir/theme.txt"
if ! grep --quiet "$grub_theme_variable" /etc/default/grub; then
	message '    %s' 'enabling theme...'
	if ! echo "$grub_theme_variable" | request-sudo tee --append /etc/default/grub >/dev/null; then
		fatal 'failed to enable theme'
	fi
	message '    %s' 'done enabling theme.'
fi

message '    %s' 're-generating Grub configuration...'
request-sudo update-grub
message '    %s' 'done re-generating Grub configuration.'
message '  %s' 'done configuring Grub.'

user_emacs_unit_path="$(xdg_config)"/systemd/user/emacs-snapshot.service
if ! [ -f "$user_emacs_unit_path" ]; then
	message '  %s' 'linking Emacs snapshot service into place...'
	if ! package_emacs_unit_path="$(find /usr/lib -name emacs-snapshot.service)"; then
		fatal 'failed to find path to Emacs Systemd unit'
	fi
	systemctl --user link "$package_emacs_unit_path"
	# Create an alias from "emacs-snapshot" to "emacs" for more convenient usage
	ln -sf "$user_emacs_unit_path" "$(xdg_config)"/systemd/user/emacs.service
	systemctl --user daemon-reload
	message '  %s' 'done linking Emacs snapshot service into place.'
fi

if ! systemctl --user is-enabled --quiet emacs-snapshot.service; then
	message '  %s' 'setting up Emacs daemon...'
	systemctl --user enable --now emacs-snapshot.service
	message '  %s' 'done setting up Emacs daemon.'
fi

emacs_client_desktop_path="$HOME"/.local/share/applications/emacs-client.desktop
if ! [ -f "$emacs_client_desktop_path" ]; then
	message '  %s' 'installing Emacs client desktop file...'
	mkdir -p "$(dirname "$emacs_client_desktop_path")"
	echo '[Desktop Entry]
Version=1.0
Name=Emacs (Client)
GenericName=Text Editor
Comment=GNU Emacs is an extensible, customizable text editor - and more
MimeType=text/english;text/plain;text/x-makefile;text/x-c++hdr;text/x-c++src;text/x-chdr;text/x-csrc;text/x-java;text/x-moc;text/x-pascal;text/x-tcl;text/x-tex;application/x-shellscript;text/x-c;text/x-c++;
TryExec=/usr/bin/emacsclient
Exec=/usr/bin/emacsclient --create-frame --alternate-editor emacs %F
Icon=emacs
Type=Application
Terminal=false
Categories=Utility;Development;TextEditor;
StartupWMClass=Emacs
Keywords=Text;Editor;
' >"$emacs_client_desktop_path"
	message '  %s' 'done installing Emacs client desktop file.'
fi

message '  %s' 'updating user directories...'
declare -A user_directories=(
	[DESKTOP]="$HOME"/desktop
	[DOWNLOAD]="$HOME"/downloads
	[TEMPLATES]="$HOME"/templates
	[PUBLICSHARE]="$HOME"/public
	[DOCUMENTS]="$HOME"/documents
	[MUSIC]="$HOME"/music
	[PICTURES]="$HOME"/pictures
	[VIDEOS]="$HOME"/videos
)
for user_directory_name in "${!user_directories[@]}"; do
	user_directory_path="${user_directories[$user_directory_name]}"

	if ! [ -d "$user_directory_path" ]; then
		user_directory_basename="$(basename "$user_directory_path")"
		user_directory_path_capitalized="$HOME"/"${user_directory_basename^}"
		if [ -d "$user_directory_path_capitalized" ]; then
			message '    %s' "moving '$user_directory_path_capitalized' to '$user_directory_path'"
			mv "$user_directory_path_capitalized" "$user_directory_path"
		else
			message '    %s' "creating '$user_directory_path'"
			mkdir -p "$user_directory_path"
		fi
	fi

	message '    %s' "setting '$user_directory_name' to '$user_directory_path'"
	xdg-user-dirs-update --set "$user_directory_name" "$user_directory_path"
done
message '  %s' 'done updating user directories.'

config_dir="$(xdg_config)"
mkdir -p "$config_dir"/i3
ln -sf "$_dir"/../config/i3 "$config_dir"/i3/config

mkdir -p "$config_dir"/i3blocks
ln -sf "$_dir"/../config/i3blocks "$config_dir"/i3blocks/config

mkdir -p "$config_dir"/redshift
ln -sf "$_dir"/../config/redshift.conf "$config_dir"/redshift/redshift.conf

mkdir -p "$config_dir"/pulse
ln -sf "$_dir"/../config/pulseaudio-configuration-script.pa "$config_dir"/pulse/default.pa

mkdir -p "$config_dir"/i3/workspaces
if ! [ -x "$config_dir"/i3/workspaces/init ]; then
	echo 'initializing workspace initialization script...'
	touch "$config_dir"/i3/workspaces/init
	chmod +x "$config_dir"/i3/workspaces/init
	echo 'done initializing workspace initialization script.'
fi

if ! [ -x "$config_dir"/i3/login-local ]; then
	echo 'initializing local login script...'
	touch "$config_dir"/i3/login-local
	chmod +x "$config_dir"/i3/login-local
	echo 'done initializing local login script.'
fi

xresources_path="$HOME"/.Xresources
if ! [ -f "$xresources_path" ]; then
	message '  %s' 'writing .Xresources file...'
	# Set display DPI
	echo 'Xft.dpi: 96' >"$xresources_path"
	message '  %s' 'done writing .Xresources file.'
fi

x11vnc_unit_path=/etc/systemd/system/x11vnc.service
if ! request-sudo [ -f "$x11vnc_unit_path" ]; then
	message '  %s' 'creating x11vnc Systemd unit...'
	echo '[Unit]
Description="x11vnc"
Requires=display-manager.service
After=display-manager.service

[Service]
ExecStart=/usr/bin/x11vnc -xkb -noxrecord -noxfixes -noxdamage -display :0 -auth guess
ExecStop=/usr/bin/killall x11vnc
Restart=on-failure
Restart-sec=2

[Install]
WantedBy=multi-user.target
' | request-sudo tee "$x11vnc_unit_path" >/dev/null
	request-sudo systemctl daemon-reload
	message '  %s' 'done creating x11vnc Systemd unit.'
fi

if ! request-sudo systemctl is-enabled --quiet x11vnc.service; then
	message '  %s' 'setting up x11vnc service...'
	request-sudo systemctl enable --now x11vnc.service
	message '  %s' 'done setting up x11vnc service.'
fi

message '  %s' 'configuring GNOME Keyring...'
# Create customized versions of the desktop files for the secrets and SSH components so they start automatically
# By default, the OnlyShowIn lines in the desktop files would prevent these components from being started
sed '/^OnlyShowIn.*$/d' /etc/xdg/autostart/gnome-keyring-secrets.desktop >"$config_dir"/autostart/gnome-keyring-secrets.desktop
sed '/^OnlyShowIn.*$/d' /etc/xdg/autostart/gnome-keyring-ssh.desktop >"$config_dir"/autostart/gnome-keyring-ssh.desktop
message '  %s' 'done configuring GNOME Keyring.'

message '  %s' 'disabling input language icon in system tray...'
gsettings set org.freedesktop.ibus.panel show-icon-on-systray false
message '  %s' 'done disabling input language icon in system tray.'

message '  %s' 'enabling arbtt autostart...'
ln -sf /usr/share/doc/arbtt/examples/arbtt-capture.desktop "$config_dir"/autostart
message '  %s' 'done enabling arbtt autostart.'

home_assistant_daemon_unit_path="$(xdg_config)"/systemd/user/home-assistant-daemon.service
if ! [ -f "$home_assistant_daemon_unit_path" ]; then
	home_assistant_daemon_environment_file_path="$(xdg_config)"/home-assistant-daemon.env
	if ! [ -f "$home_assistant_daemon_environment_file_path" ]; then
		message '  %s' 'creating Home Assistant daemon environment file...'
		echo '# Home Assistant daemon environment variables, in the format of a Systemd unit EnvironmentFile
# Hostname of Home Assistant instance
HOME_ASSISTANT_HOST=example.com
# API token for Home Assistant instance
HOME_ASSISTANT_TOKEN=
' >"$home_assistant_daemon_environment_file_path"
		message '  %s' 'done creating Home Assistant daemon environment file.'
		warn "Home Assistant daemon configuration created at $home_assistant_daemon_environment_file_path, open the file and fill in the values"
	fi

	message '  %s' 'creating Home Assistant daemon Systemd unit...'
	echo "[Unit]
Description=\"Home Assistant Daemon\"

[Service]
EnvironmentFile=$home_assistant_daemon_environment_file_path
ExecStart=$(realpath "$_dir"/../bin/home-assistant-daemon)

[Install]
WantedBy=graphical.target
" >"$home_assistant_daemon_unit_path"
	systemctl --user daemon-reload
	message '  %s' 'done creating Home Assistant daemon Systemd unit.'
fi

if ! systemctl --user is-enabled --quiet home-assistant-daemon.service; then
	message '  %s' 'setting up Home Assistant daemon...'
	systemctl --user enable --now home-assistant-daemon.service
	message '  %s' 'done setting up Home Assistant daemon.'
fi

message "done setting up Ubuntu."
