#!/usr/bin/env bash

# This script must run after the OS-specific scripts because it depends on Nodenv.

_dir="$(dirname "$(realpath "${BASH_SOURCE[0]}")")"

# shellcheck source=./lib/helpers
source "$_dir"/helpers

log() {
	log_with_component node "$@"
}

log_start 'setting up Node'

if is_linux; then
	nodenv_root="${XDG_DATA_HOME:-$HOME/.local/share}"/nodenv
	log_start "installing Nodenv to '$nodenv_root'"
	mkdir -p "$nodenv_root"
	if ! [ -x "$nodenv_root"/bin/nodenv ]; then
		if ! git clone --depth 1 https://github.com/nodenv/nodenv.git "$nodenv_root" >/dev/null; then
			fatal 'failed to clone Nodenv'
		fi
	fi
	log_end

	log_start 'initializing Nodenv environment for this session'
	# Without this, Nodenv can't find its plugins (e.g. `nodenv install`, which comes from `node-build`)
	export NODENV_ROOT="$nodenv_root"
	# Add `nodenv` to PATH so that it can call itself (e.g. `nodenv rehash`)
	# https://unix.stackexchange.com/a/415028/288259
	PATH="${PATH:+${PATH}:}$nodenv_root/bin"
	eval "$("$nodenv_root"/bin/nodenv init -)"
	log_end

	log_start 'installing Nodenv plugins'
	mkdir -p "$nodenv_root"/plugins

	declare -a nodenv_plugins=(
		node-build
		nodenv-update
		nodenv-default-packages
	)

	for nodenv_plugin in "${nodenv_plugins[@]}"; do
		if ! [ -d "$nodenv_root"/plugins/"$nodenv_plugin" ]; then
			if ! git clone --depth 1 https://github.com/nodenv/"$nodenv_plugin".git "$nodenv_root"/plugins/"$nodenv_plugin" >/dev/null; then
				fatal "failed to install Nodenv plugin '$nodenv_plugin'"
			fi
		fi
	done
	log_end
fi

log 'copying default packages file'
cp "$_dir"/../config/npm-default-packages "$(nodenv root)"/default-packages &>/dev/null || true

nodenv_global_version_path="$(nodenv root)"/version
if [ -f "$nodenv_global_version_path" ]; then
	log_start 'removing legacy global version'
	rm -f "$nodenv_global_version_path"
	log_end
fi

log_start 'installing default packages'
nodenv default-packages install system
nodenv default-packages install --all
log_end

log_start 'setting Python path'
# Must initialize Nodenv in order for npm to be available in PATH
eval "$(nodenv init -)"
if ! npm config set python "$(command -v python3)"; then
	warn 'failed to set npm Python configuration option'
fi
log_end

if is_macos && [ -f "$NPM_CONFIG_USERCONFIG" ] && ! [ -h "$HOME"/.npmrc ]; then
	log_start 'linking npmrc to home directory'
	ln -sf "$NPM_CONFIG_USERCONFIG" "$HOME"/.npmrc
	log_end
fi

log_end
