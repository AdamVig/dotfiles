#!/usr/bin/env bash

_dir="$(dirname "$(realpath "${BASH_SOURCE[0]}")")"

# shellcheck source=./lib/helpers
source "$_dir"/helpers

log() {
	log_with_component apt "$@"
}

log_start 'setting up apt'

# shellcheck disable=SC2119
request_sudo

log_start 'configuring repositories'
# $1: string that uniquely identifies repository
is_repository_configured() {
	grep --quiet --recursive "$1" /etc/apt/sources.list /etc/apt/sources.list.d/
}

# $1: human-readable name, used in filenames of sources file and key
# $2: URL to signing key
# $3: latter part of repository configuration string, e.g. "http://repository.spotify.com stable non-free", not
# including the arch or signed-by options
add_repository() {
	local friendly_name="${1:-}"
	local key_url="${2:-}"
	local repo_config="${3:-}"

	local key_path=/usr/share/keyrings/"$friendly_name"-archive-keyring.gpg

	if ! _curl "$key_url" | request_sudo gpg --dearmor -o "$key_path"; then
		fatal 'failed to add key'
	fi

	echo "deb [arch=$(dpkg --print-architecture) signed-by=$key_path] $repo_config" |
		request_sudo tee /etc/apt/sources.list.d/"$friendly_name".list >/dev/null
}

if ! is_repository_configured 'balena'; then
	log_start 'adding Balena Etcher repository'
	add_repository 'balena' 'https://dl.cloudsmith.io/public/balena/etcher/gpg.70528471AFF9A051.key' "https://dl.cloudsmith.io/public/balena/etcher/deb/ubuntu $(lsb_release --short --codename) main"
	log_end
fi

if ! is_repository_configured 'microsoft.com/repos/code'; then
	log_start 'adding Visual Studio Code repository'
	add_repository 'vscode' 'https://packages.microsoft.com/keys/microsoft.asc' 'https://packages.microsoft.com/repos/code stable main'
	log_end
fi

if ! is_repository_configured 'digikam'; then
	log_start 'adding digiKam repository'
	request_sudo add-apt-repository --no-update --yes ppa:savoury1/digikam
	log_end
fi

if ! is_repository_configured 'spotify'; then
	log_start 'adding Spotify repository'
	# https://www.spotify.com/us/download/linux/
	add_repository 'spotify' 'https://download.spotify.com/debian/pubkey_5E3C45D7B312C643.gpg' 'http://repository.spotify.com stable non-free'
	log_end
fi

if ! is_repository_configured 'slack'; then
	log_start 'adding Slack repository'
	add_repository 'slack' 'https://packagecloud.io/slacktechnologies/slack/gpgkey' 'https://packagecloud.io/slacktechnologies/slack/debian/ jessie main'
	log_end
fi

if ! is_repository_configured 'signal'; then
	log_start 'adding Signal repository'
	add_repository 'signal' 'https://updates.signal.org/desktop/apt/keys.asc' 'https://updates.signal.org/desktop/apt xenial main'
	log_end
fi

if ! is_repository_configured 'nextcloud'; then
	log_start 'adding Nextcloud repository'
	request_sudo add-apt-repository --no-update --yes ppa:nextcloud-devs/client
	log_end
fi

if ! is_repository_configured 'git-core'; then
	log_start 'adding git repository'
	request_sudo add-apt-repository --no-update --yes ppa:git-core/ppa
	log_end
fi

if ! is_repository_configured 'azlux'; then
	log_start 'adding broot repository'
	add_repository 'broot' 'https://azlux.fr/repo.gpg.key' 'http://packages.azlux.fr/debian/ buster main'
	log_end
fi

if ! is_repository_configured 'ubuntu-elisp'; then
	log_start 'adding Ubuntu Emacs snapshot repository'
	request_sudo add-apt-repository --no-update --yes ppa:ubuntu-elisp/ppa
	log_end
fi

if ! is_repository_configured 'cli.github.com'; then
	log_start 'adding GitHub CLI repository'
	add_repository 'githubcli' 'https://cli.github.com/packages/githubcli-archive-keyring.gpg' 'https://cli.github.com/packages stable main'
	log_end
fi

if ! is_repository_configured 'yubico'; then
	log_start 'adding Yubico repository'
	request_sudo add-apt-repository --no-update --yes ppa:yubico/stable
	log_end
fi

# Remove previous workaround for installing Chromium
if is_repository_configured 'deb.debian.org/debian stable'; then
	log_start 'removing Debian Stable repository'
	log_start 'removing sources file'
	request_sudo rm -f /etc/apt/sources.list.d/debian-stable.list*
	log_end
	log_start 'removing apt policy'
	request_sudo rm -f /etc/apt/preferences.d/debian-chromium >/dev/null
	log_end
	log_end
fi
log_end

log_start 'updating lists'
if request_sudo apt-get update >/dev/null; then
	log_end
else
	warn 'failed to update lists'
fi

log_start 'upgrading packages'
if request_sudo apt-get upgrade --yes --autoremove >/dev/null; then
	log_end
else
	warn 'failed to upgrade packages, continuing'
fi

declare -a packages=(
	# system dependencies
	apt-transport-https
	software-properties-common

	# default utilities
	gnupg
	openssh-server
	rsync
	wget

	# replacements of default utilities
	bat     # Better cat
	broot   # Better tree
	exa     # Better ls
	fd-find # Better find
	htop    # Better top
	httpie  # Better curl
	mosh    # Better ssh
	ripgrep # Better grep

	# command line tools
	fzf      # Fuzzy finder
	gh       # GitHub CLI
	gnuplot  # Command-line plotting
	graphviz # Graph visualization tool
	imagemagick
	jq                 # JSON processor
	libglib2.0-dev-bin # For compiling .gresources files
	magic-wormhole     # Point-to-point file sharing
	mosquitto          # MQTT broker and password tool
	mosquitto-clients  # MQTT client
	p7zip
	pandoc
	playerctl         # Media player controller
	postgresql-client # PostgreSQL CLI
	tig               # Visual Git client
	tree
	units # Unit conversion calculator
	unzip
	v4l-utils  # Webcam control tools
	wine       # Support for Windows applications
	winetricks # Tools for working with Wine
	wmctrl     # X window manager control CLI
	x11vnc     # X server VNC
	xclip      # Clipboard CLI
	xsel       # Clipboard CLI
	xdotool    # X input event generator
	xdg-utils

	# shell
	bash
	zsh

	# programming languages
	golang
	php
	python3
	ruby
	rustc

	# programming language tools
	composer # PHP
	python3-pip
	shellcheck # Shell script linter

	# applications
	balena-etcher-electron # Image flashing tool
	code
	d-feet  # D-Bus debugger
	digikam # Photo library manager
	docker.io
	emacs-snapshot
	firefox
	flameshot     # Screenshot tool
	gnome-keyring # Secret manager
	gpsbabel      # GPS file conversion tool
	i3            # Window manager
	i3blocks      # Status bar generator
	inkscape
	kdiff3 # Merge tool
	kitty  # GPU-accelerated terminal emulator
	libreoffice
	lxpolkit           # Polkit authentication agent
	meld               # Comparison tool for version control, files, and directories
	mpv                # Media player
	nautilus-nextcloud # Nextcloud Nautilus integration (includes client)
	qemu-system-x86    # Virtual machine tool
	redshift           # Screen color temperature adjustment tool
	rofi               # Application launcher
	signal-desktop
	slack-desktop
	spotify-client
	steam
	virt-manager # Virtual machine manager
	yubikey-manager

	# fonts
	fonts-firacode
	fonts-noto
	fonts-noto-color-emoji
	fonts-open-sans
	fonts-roboto
)

log_start 'installing packages'
if ! request_sudo apt-get install --yes "${packages[@]}"; then
	warn 'failed to install apt packages; this may require manual resolution'
fi
log_end

declare -a unwanted_packages=(
	chromium
	copyq
	figma-linux
	lutris

	# Used to be installed via .deb, now installed as a binary
	websocat
)

log_start 'removing unwanted packages'
for unwanted_package in "${unwanted_packages[@]}"; do
	request_sudo apt-get remove --yes "$unwanted_package" &>/dev/null || true
done
log_end

log_start 'installing packages from non-repository sources'
log_start 'installing Google Chrome'
chrome_url='https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb'
chrome_tmp="$(mktemp --suffix .deb)"
if ! _curl "$chrome_url" --output "$chrome_tmp"; then
	fatal 'failed to download Google Chrome'
fi
if ! request_sudo apt-get install "$chrome_tmp"; then
	fatal 'failed to install Google Chrome'
fi
rm -f "$chrome_tmp"
log_end

log_start 'installing Hugo'
if ! hugo_url="$(get_release_url 'gohugoio/hugo' 'Linux-64bit.deb')"; then
	fatal 'failed to get Hugo release URL'
fi
hugo_tmp="$(mktemp --suffix .deb)"
if ! _curl "$hugo_url" --output "$hugo_tmp"; then
	fatal 'failed to download Hugo'
fi
if ! request_sudo apt-get install "$hugo_tmp"; then
	fatal 'failed to install Hugo'
fi
rm -f "$hugo_tmp"
log_end

log_start 'installing hyperfine'
if ! hyperfine_url="$(get_release_url 'sharkdp/hyperfine' '_amd64.deb')"; then
	fatal 'failed to get hyperfine release URL'
fi
hyperfine_tmp="$(mktemp --suffix .deb)"
if ! _curl "$hyperfine_url" --output "$hyperfine_tmp"; then
	fatal 'failed to download hyperfine'
fi
if ! request_sudo apt-get install "$hyperfine_tmp"; then
	fatal 'failed to install hyperfine'
fi
rm -f "$hyperfine_tmp"
log_end

log_start 'installing git-delta'
if ! git_delta_url="$(get_release_url 'dandavison/delta' '_amd64.deb')"; then
	fatal 'failed to get git-delta release URL'
fi
git_delta_tmp="$(mktemp --suffix .deb)"
if ! _curl "$git_delta_url" --output "$git_delta_tmp"; then
	fatal 'failed to download git-delta'
fi
if ! request_sudo apt-get install "$git_delta_tmp"; then
	fatal 'failed to install git-delta'
fi
rm -f "$git_delta_tmp"
log_end

log_start 'installing glow'
if ! glow_url="$(get_release_url 'charmbracelet/glow' '_linux_amd64.deb')"; then
	fatal 'failed to get glow release URL'
fi
glow_tmp="$(mktemp --suffix .deb)"
if ! _curl "$glow_url" --output "$glow_tmp"; then
	fatal 'failed to download glow'
fi
if ! request_sudo apt-get install "$glow_tmp"; then
	fatal 'failed to install glow'
fi
rm -f "$glow_tmp"
log_end

log_start 'installing Minikube'
# https://minikube.sigs.k8s.io/docs/start/
minikube_url='https://storage.googleapis.com/minikube/releases/latest/minikube_latest_amd64.deb'
minikube_tmp="$(mktemp --suffix .deb)"
if ! _curl "$minikube_url" --output "$minikube_tmp"; then
	fatal 'failed to download Minikube'
fi
# Ignore recommends because they include VirtualBox
if ! request_sudo apt-get install --no-install-recommends "$minikube_tmp"; then
	fatal 'failed to install Minikube'
fi
rm -f "$minikube_tmp"
log_end

log_start 'installing pastel'
if ! pastel_url="$(get_release_url 'sharkdp/pastel' '_amd64.deb')"; then
	fatal 'failed to get pastel release URL'
fi
pastel_tmp="$(mktemp --suffix .deb)"
if ! _curl "$pastel_url" --output "$pastel_tmp"; then
	fatal 'failed to download pastel'
fi
if ! request_sudo apt-get install "$pastel_tmp"; then
	fatal 'failed to install pastel'
fi
rm -f "$pastel_tmp"
log_end
log_end

log_end
