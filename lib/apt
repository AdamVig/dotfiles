#!/usr/bin/env bash

_dir="$(dirname "$(realpath "${BASH_SOURCE[0]}")")"

# shellcheck source=./lib/helpers
source "$_dir"/helpers

log() {
	log_with_component apt "$@"
}

log_start 'setting up apt'

# shellcheck disable=SC2119
request_sudo

if ! [ -f /etc/os-release ]; then
	fatal '/etc/os-release is missing, cannot detect operating system'
fi

log_start 'detecting operating system'
# shellcheck source=/dev/null
source /etc/os-release
distro="$ID"
codename="$VERSION_CODENAME"
log "detected distribution \"${distro}\" version codename \"${codename}\""
log_end

log_start 'configuring repositories'
# $1: string that uniquely identifies repository
is_repository_configured() {
	grep --quiet --recursive "$1" /etc/apt/sources.list /etc/apt/sources.list.d/
}

# $1: human-readable name, used in filenames of sources file and key
# $2: URL to signing key
# $3: latter part of repository configuration string, e.g. "http://repository.spotify.com stable non-free", not
# including the arch or signed-by options
add_repository() {
	local friendly_name="${1-}"
	local key_url="${2-}"
	local repo_config="${3-}"

	local key_path=/usr/share/keyrings/"$friendly_name"-archive-keyring.gpg

	if ! _curl "$key_url" | request_sudo gpg --dearmor -o "$key_path"; then
		fatal 'failed to add key'
	fi

	echo "deb [arch=$(dpkg --print-architecture) signed-by=$key_path] $repo_config" |
		request_sudo tee /etc/apt/sources.list.d/"$friendly_name".list >/dev/null
}

# $1: human-readable name, used in filenames of sources file and key
# $2: fingerprint of signing key
# $3: latter part of repository configuration string, e.g. "http://repository.spotify.com stable non-free", not
# including the arch or signed-by options
add_ppa() {
	local key_fingerprint="${2-}"
	local repo_name="${3-}"

	add_repository \
		"$1" \
		"https://keyserver.ubuntu.com/pks/lookup?op=get&options=mr&search=0x${key_fingerprint}" \
		"http://ppa.launchpad.net/${repo_name}/ubuntu/ ${codename} main"
}

if ! is_repository_configured 'docker'; then
	log_start 'adding Docker repository'
	add_repository 'docker' 'https://download.docker.com/linux/ubuntu/gpg' "https://download.docker.com/linux/ubuntu ${codename} stable"
	log_end
fi

if ! is_repository_configured 'microsoft.com/repos/code'; then
	log_start 'adding Visual Studio Code repository'
	add_repository 'vscode' 'https://packages.microsoft.com/keys/microsoft.asc' 'https://packages.microsoft.com/repos/code stable main'
	log_end
fi

if ! is_repository_configured 'spotify'; then
	log_start 'adding Spotify repository'
	# https://www.spotify.com/us/download/linux/
	add_repository 'spotify' 'https://download.spotify.com/debian/pubkey_C85668DF69375001.gpg' 'https://repository.spotify.com stable non-free'
	log_end
fi

if ! is_repository_configured 'slack'; then
	log_start 'adding Slack repository'
	add_repository 'slack' 'https://packagecloud.io/slacktechnologies/slack/gpgkey' 'https://packagecloud.io/slacktechnologies/slack/debian/ jessie main'
	log_end
fi

if ! is_repository_configured 'signal'; then
	log_start 'adding Signal repository'
	add_repository 'signal' 'https://updates.signal.org/desktop/apt/keys.asc' 'https://updates.signal.org/desktop/apt xenial main'
	log_end
fi

if ! is_repository_configured 'git-core'; then
	log_start 'adding git repository'
	add_ppa 'git' 'F911AB184317630C59970973E363C90F8F1B6217' 'git-core/ppa'
	log_end
fi

if ! is_repository_configured 'cli.github.com'; then
	log_start 'adding GitHub CLI repository'
	add_repository 'githubcli' 'https://cli.github.com/packages/githubcli-archive-keyring.gpg' 'https://cli.github.com/packages stable main'
	log_end
fi

if ! is_repository_configured 'mozillateam'; then
	log_start 'adding Mozilla Team repository'
	add_ppa 'mozillateam' '738BEB9321D1AAEC13EA9391AEBDF4819BE21867' 'mozillateam/ppa'
	if ! [ -f /etc/apt/preferences.d/mozillateamppa ]; then
		echo 'Package: thunderbird*
Pin: release o=LP-PPA-mozillateam
Pin-Priority: 1001

Package: thunderbird*
Pin: release o=Ubuntu
Pin-Priority: -1
' | request_sudo tee /etc/apt/preferences.d/mozillateamppa >/dev/null
	fi
	log_end
fi

if ! is_repository_configured 'eza'; then
	log_start 'adding Eza repository'
	add_repository 'eza' 'https://raw.githubusercontent.com/eza-community/eza/main/deb.asc' 'http://deb.gierens.de stable main'
	log_end
fi

if ! is_repository_configured 'nextdns'; then
	log_start 'adding NextDNS repository'
	add_repository 'nextdns' 'https://repo.nextdns.io/nextdns.gpg' 'https://repo.nextdns.io/deb stable main'
	log_end
fi

log_start 'updating lists'
if request_sudo apt-get update >/dev/null; then
	log_end
else
	warn 'failed to update lists'
fi

log_start 'upgrading packages'
if request_sudo apt-get upgrade --yes --autoremove >/dev/null; then
	log_end
else
	warn 'failed to upgrade packages, continuing'
fi

declare -a packages=(
	# system dependencies
	apt-transport-https
	software-properties-common

	# default utilities
	gnupg
	openssh-server
	rsync
	wget

	# replacements of default utilities
	eza     # Better ls
	fd-find # Better find
	htop    # Better top
	httpie  # Better curl
	mosh    # Better ssh
	ripgrep # Better grep

	# command line tools
	firejail # Sandbox used by appimaged
	fzf      # Fuzzy finder
	gh       # GitHub CLI
	graphviz # Graph visualization tool
	imagemagick
	jq                 # JSON processor
	libglib2.0-dev-bin # For compiling .gresources files
	nextdns            # DNS client
	p7zip
	pandoc
	postgresql-client # PostgreSQL CLI
	pulseaudio-utils  # PulseAudio CLI pactl (works with WirePlumber)
	smartmontools     # SMART hard drive health
	tig               # Visual Git client
	tree
	unzip
	v4l-utils  # Webcam control tools
	wine       # Support for Windows applications
	winetricks # Tools for working with Wine
	wireguard  # VPN
	wmctrl     # X window manager control CLI
	xclip      # Clipboard CLI
	xsel       # Clipboard CLI
	xdotool    # X input event generator
	xdg-utils

	# shell
	bash
	zsh

	# programming languages
	golang
	php
	python3
	ruby
	rustc

	# programming language tools
	cargo       # Rust
	npm         # Node
	pipx        # Run Python CLI tools
	python3-pip # Python
	shellcheck  # Shell script linter

	# Docker
	docker-ce
	docker-ce-cli
	containerd.io
	docker-buildx-plugin
	docker-compose-plugin

	# applications
	code
	emacs # Text editor
	inkscape
	kdiff3 # Merge tool
	libreoffice
	lxpolkit # Polkit authentication agent
	meld     # Comparison tool for version control, files, and directories
	mpv      # Media player
	signal-desktop
	slack-desktop
	spotify-client
	thunderbird # Email client
	viewnior    # Image viewer
	xournalpp   # PDF editor

	# fonts
	fonts-noto
	fonts-noto-color-emoji
	fonts-open-sans
	fonts-roboto
)

log_start 'installing packages'
if ! request_sudo apt-get install --yes "${packages[@]}"; then
	warn 'failed to install apt packages; this may require manual resolution'
fi
log_end

declare -a unwanted_packages=(
	chromium
	composer # PHP
	d-feet   # D-Bus debugger
	firefox
	google-chrome-stable
	gnuplot         # Command-line plotting
	gpsbabel        # GPS file conversion tool
	magic-wormhole  # Point-to-point file sharing
	mdadm           # Software RAID
	qemu-system-x86 # Virtual machine tool
	redshift        # Screen color temperature adjustment tool
	rpi-imager      # Raspberry Pi imager
	units           # Unit conversion calculator
	virt-manager    # Virtual machine manager

	# i3
	brightnessctl # Control screen brightness
	flameshot     # Screenshot tool
	i3            # Window manager
	i3blocks      # Status bar generator
	obs-studio    # Screen recording
	rofi          # Application launcher
)

log_start 'removing unwanted packages'
for unwanted_package in "${unwanted_packages[@]}"; do
	request_sudo apt-get remove --yes --autoremove "$unwanted_package" &>/dev/null || true
done
log_end

log_start 'installing auto-updating packages from non-repository sources'
log_start 'installing Google Chrome'
if ! install_deb_from_url 'https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb'; then
	fatal 'failed to install Google Chrome'
fi
log_end

log_end

log_end
