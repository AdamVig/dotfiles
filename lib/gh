#!/usr/bin/env bash

_dir="$(dirname "$(realpath "${BASH_SOURCE[0]}")")"

# shellcheck source=./lib/helpers
source "$_dir"/helpers

log() {
	log_with_component gh "$@"
}

log_start 'setting up GitHub CLI (gh)'

if ! command -v gh >/dev/null; then
	warn_and_bail 'could not find command "gh", skipping'
fi

log_start 'checking authentication'
if ! gh auth status &>/dev/null; then
	log_start 'authenticating'
	gh auth login --hostname=github.com --web --scopes=admin:public_key,codespace,user,write:gpg_key --git-protocol=https
	log_end
fi
log_end

log_start 'configuring gh as Git credential helper'
gh auth setup-git
log_end

log_start 'setting configuration'
gh config set git_protocol https
# Do not use the default pager, bat, because it adds unnecessary clutter
gh config set pager less
log_end

log_start 'setting aliases'
gh_alias_set() {
	# "alias set" exits 1 if the alias already exists, so swallow the error
	gh alias set "$@" || true
}

# Create a pull request
# $1: base branch
# $2: title
# shellcheck disable=SC2016
gh_alias_set prc --shell 'gh pr create --assignee=@me --base="$1" --body="$(gh pr-body-commits "$1")" --title="$2" "${@:3}" && gh pr view --web'

# Create a draft pull request
# $1: base branch
# $2: title
# shellcheck disable=SC2016
gh_alias_set prcd --shell 'gh prc "$1" "$2" --draft'

# Get the base branch for the current branch's pull request
# shellcheck disable=SC2016
gh_alias_set prbase "pr view --json baseRefName --jq '.baseRefName'"

# Convenience shortcut for checking out a pull request
gh_alias_set co 'pr checkout'

# Set a pull request to auto-merge
# $1: commit to get merge commit body from, defaults to "HEAD"
# shellcheck disable=SC2016
gh_alias_set automerge --shell 'gh pr merge --squash --subject="$(gh pr view --json=title,number --template="{{ .title }} (#{{ .number }})")" --body="$(git show --no-patch --pretty="%b" "${1:-HEAD}")" --auto && gh pr view --json=autoMergeRequest --template="Merge commit message:{{ \"\n\" }}{{ .autoMergeRequest.commitHeadline }}{{ \"\n\" }}{{ .autoMergeRequest.commitBody }}"'

log_end

log_start 'installing extensions'
declare -a gh_extensions=(
	AdamVig/gh-pr-body-commits
	AdamVig/gh-watch
	davidraviv/gh-clean-branches
)

for gh_extension in "${gh_extensions[@]}"; do
	log "$gh_extension"
	gh extension install "$gh_extension" &>/dev/null || true
done
log_end

log_end
