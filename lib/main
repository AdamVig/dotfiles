#!/usr/bin/env bash

set -euo pipefail

_dir="$(dirname "$(realpath "${BASH_SOURCE[0]}")")"

# shellcheck source=./lib/helpers
source "$_dir"/helpers

_dir="$(dirname "$(realpath "${BASH_SOURCE[0]}")")"

# Ask for password at start
# shellcheck disable=SC2119
request-sudo

message "symlinking dotfiles to your home directory..."
ln -sf "$_dir"/../.bashrc "$HOME"
ln -sf "$_dir"/../.profile "$HOME"

message 'setting up Emacs configuration...'
# Remove legacy configuration location
rm -f "$HOME"/.emacs

emacs_config_path="$HOME"/.emacs.d/init.el
if ! [ -f "$emacs_config_path" ]; then
	mkdir -p "$(dirname "$emacs_config_path")"
	ln -sf "$_dir"/../config/emacs.el "$emacs_config_path"
fi
message 'done setting up Emacs configuration.'

message "configuring SSH..."
mkdir -p "$HOME"/.ssh
ssh_config='AddKeysToAgent yes'
ssh_config_path="$HOME"/.ssh/config
if ! [ -f "$ssh_config_path" ] || ! grep --quiet "$ssh_config" "$ssh_config_path"; then
	echo "$ssh_config" >>"$ssh_config_path"
fi

message "configuring GPG..."
mkdir -p "$HOME"/.gnupg
gpg_agent_config='default-cache-ttl 34560000
max-cache-ttl 34560000'
gpg_agent_config_path="$HOME"/.gnupg/gpg-agent.conf
if ! [ -f "$gpg_agent_config_path" ] || ! grep --quiet "$gpg_agent_config" "$gpg_agent_config_path"; then
	message '  %s' "updating GPG Agent configuration..."
	echo -e "$gpg_agent_config" >>"$gpg_agent_config_path"
	message '  %s' "done updating GPG Agent configuration."
fi
message "done configuring GPG."

bin_dir="$HOME"/.local/bin
message "creating '$bin_dir'..."
mkdir -p "$bin_dir"
message "done creating '$bin_dir'."

config_dir="$(xdg_config)"
message "symlinking configurations to '$config_dir'..."
if [ -h "$HOME"/.ripgreprc ]; then
	message "  %s" "removing legacy .ripgreprc..."
	rm -f "$HOME"/.ripgreprc
fi
mkdir -p "$config_dir"/ripgrep
ln -sf "$_dir"/../config/ripgrep "$config_dir"/ripgrep/config

mkdir -p "$config_dir"/bat
ln -sf "$_dir"/../config/bat "$config_dir"/bat/config

if ! [ -d "$config_dir"/docker ]; then
	message "creating Docker configuration directory..."
	mkdir -p "$config_dir"/docker
fi

message 'symlinking arbtt configuration...'
mkdir -p "$HOME"/.arbtt
ln -sf "$_dir"/../config/arbtt.cfg "$HOME"/.arbtt/categorize.cfg
message 'done symlinking arbtt configuration.'

message "running OS-specific scripts..."

if "$_dir"/../bin/is-macos; then
	"$_dir"/macos
	"$_dir"/brew
elif "$_dir"/../bin/is-linux; then
	"$_dir"/linux
	if command -v lsb_release >/dev/null &&
		[ "$(lsb_release --id --short)" = 'Ubuntu' ]; then
		"$_dir"/ubuntu
		"$_dir"/remote-management
	fi
fi

if "$_dir"/../bin/is-wsl; then
	"$_dir"/wsl
fi

"$_dir"/git
"$_dir"/golang
"$_dir"/node
"$_dir"/pip
"$_dir"/tmux
"$_dir"/vscode
"$_dir"/zsh
"$_dir"/profile-picture

if "$_dir"/../bin/is-linux; then
	# Must run after ./pip because it installs mozdownload
	if command -v mozdownload >/dev/null && command -v bunzip2 >/dev/null; then
		message '  %s' 'installing Thunderbird...'
		thunderbird_tmp_bz2="$(mktemp --dry-run --suffix .tar.bz2)"
		thunderbird_tmp_tar="${thunderbird_tmp_bz2%.bz2}"
		if ! mozdownload --application thunderbird --version latest --destination "$thunderbird_tmp_bz2"; then
			fatal 'failed to download Thunderbird'
		fi

		if ! bunzip2 "$thunderbird_tmp_bz2"; then
			fatal 'failed to decompress Thunderbird'
		fi

		thunderbird_path="$(xdg_data)"/thunderbird
		rm -rf "$thunderbird_path"
		if ! tar --extract --file "$thunderbird_tmp_tar" --directory "$(xdg_data)"; then
			fatal 'failed to extract Thunderbird'
		fi
		rm -rf "$thunderbird_tmp_tar"

		ln -sf "$thunderbird_path"/thunderbird "$HOME"/.local/bin

		message '  %s' 'done installing Thunderbird.'
	else
		warn 'could not install Thunderbird, ensure mozdownload and bunzip2 are installed'
	fi
fi

if "$_dir"/../bin/is-macos; then
	broot_root='org.dystroy.broot'
else
	broot_root='broot'
fi
broot_dir="$(xdg_config)"/"$broot_root"/launcher
if command -v broot >/dev/null && ! [ -f "$broot_dir"/installed-v1 ]; then
	message '  %s' 'installing broot shell function...'
	broot_launcher_dir="$broot_dir"/bash
	mkdir -p "$broot_launcher_dir"
	if ! broot --print-shell-function zsh >"$broot_launcher_dir"/br; then
		fatal 'failed to install broot shell function'
	fi
	broot --set-install-state installed
	message '  %s' 'done installing broot shell function.'
fi

message "done. start a new login shell or run 'source .zshrc'."
