#!/usr/bin/env bash

set -euo pipefail

_dir="$(dirname "$(realpath "${BASH_SOURCE[0]}")")"

# shellcheck source=./lib/helpers
source "$_dir"/helpers

log() {
	log_with_component main "$@"
}

# Ask for password at start
# shellcheck disable=SC2119
request_sudo

log "symlinking dotfiles to \"$HOME\""
_ln "$_dir"/../.bashrc "$HOME"
_ln "$_dir"/../.profile "$HOME"

bin_dir="$HOME"/.local/bin
log "creating \"$bin_dir\""
mkdir -p "$bin_dir"

log "symlinking executables to \"$bin_dir\""
_ln "$_dir"/../bin/* "$bin_dir"

config_dir="$(xdg_config)"
log "symlinking configurations to \"$config_dir\""
mkdir -p "$config_dir"/ripgrep
_ln "$_dir"/../config/ripgrep "$config_dir"/ripgrep/config

mkdir -p "$config_dir"/bat
_ln "$_dir"/../config/bat "$config_dir"/bat/config

if ! [ -d "$config_dir"/docker ]; then
	log 'creating Docker configuration directory'
	mkdir -p "$config_dir"/docker
fi

mkdir -p "$config_dir"/kitty
_ln "$_dir"/../config/kitty.conf "$config_dir"/kitty/kitty.conf

mkdir -p "$config_dir"/ncspot
_ln "$_dir"/../config/ncspot.toml "$config_dir"/ncspot/config.toml

log "creating tig directory"
# Prevent tig from writing ~/.tig_history
mkdir -p "$(xdg_data)"/tig

log_start 'running OS-specific scripts'

if is_macos; then
	"$_dir"/macos
	"$_dir"/brew
elif is_linux; then
	"$_dir"/linux-software
	if command -v apt >/dev/null; then
		"$_dir"/apt
	fi
	"$_dir"/grub
	if is_ubuntu; then
		"$_dir"/ubuntu
		"$_dir"/remote-management
	fi
fi

log_end

log_start 'running programming language setup scripts'
"$_dir"/golang
"$_dir"/node
"$_dir"/pip
log_end

log_start 'running application setup scripts'
"$_dir"/broot
"$_dir"/emacs
"$_dir"/gh
"$_dir"/git
"$_dir"/gpg
"$_dir"/ssh
"$_dir"/thunderbird
"$_dir"/vscode
"$_dir"/zsh
log_end

log_start 'running system setup scripts'
"$_dir"/profile-picture
log_end

log "done. start a new login shell or run 'source .zshrc'."
