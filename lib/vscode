#!/usr/bin/env bash

_dir="$(dirname "$(realpath "${BASH_SOURCE[0]}")")"

# shellcheck source=./lib/helpers
source "$_dir"/helpers

log() {
	log_with_component vscode "$@"
}

log_start 'setting up Visual Studio Code'

log_start 'symlinking Visual Studio Code settings'

if is_macos; then
	vscode_settings_dir="$HOME"/Library/Application\ Support/Code/User
elif is_linux; then
	vscode_settings_dir="$HOME"/.config/Code/User
fi

mkdir -p "$vscode_settings_dir"
_ln "$_dir"/../.vscode/settings.json "$vscode_settings_dir"/settings.json
_ln "$_dir"/../.vscode/keybindings.json "$vscode_settings_dir"/keybindings.json
_ln "$_dir"/../.vscode/prompts "$vscode_settings_dir"/prompts
log_end

declare -a extensions=(
	Catppuccin.catppuccin-vsc             # Theme
	Catppuccin.catppuccin-vsc-icons       # Icons
	dbaeumer.vscode-eslint                # JavaScript linter
	dnut.rewrap-revived                   # Reformats code comments and other text to a given line length
	docker.docker                         # Dockerfile linting/Docker Compose IntelliSense
	EditorConfig.editorconfig             # Editor text style configuration
	esbenp.prettier-vscode                # Code formatting with Prettier
	figma.figma-vscode-extension          # Figma integration
	GitHub.copilot                        # Support for Copilot
	github.vscode-github-actions          # GitHub Actions IntelliSense (auto-recommended by VS Code)
	mrmlnc.vscode-scss                    # SCSS IntelliSense and autocomplete
	ms-azuretools.vscode-containers       # Dockerfile language server (auto-recommended by VS Code)
	ms-vsliveshare.vsliveshare            # Live code sharing
	ryanluker.vscode-coverage-gutters     # Code coverage visualizer
	streetsidesoftware.code-spell-checker # Spell checker
	tamasfe.even-better-toml              # TOML support
	timonwong.shellcheck                  # Shell script linting
	unifiedjs.vscode-mdx                  # MDX support
)

declare -a no_longer_needed_extensions=(
	stkb.rewrap
)

log_start 'installing Visual Studio Code extensions'
for extension in "${extensions[@]}"; do
	set +e

	# Attempt to install extension; log message on success, log warning on failure
	if code --install-extension "$extension" >/dev/null; then
		log "installed \"$extension\""
	else
		warn "extension $extension failed to install; it may no longer be available"
	fi
	set -e
done
log_end

log_start 'uninstalling no-longer-needed Visual Studio Code extensions'
for extension in "${no_longer_needed_extensions[@]}"; do
	set +e

	# Attempt to uninstall extension; log message on success, ignore failure
	if code --uninstall-extension "$extension" &>/dev/null; then
		log "removed \"$extension\""
	fi
	set -e
done
log_end

if is_ubuntu && ! [ -f "$HOME"/.vscode/argv.json ]; then
	log_start 'configuring credential store'
	jq --null-input '{"password-store": "gnome-libsecret"}' >"$HOME"/.vscode/argv.json
	log_end
fi

log_end
