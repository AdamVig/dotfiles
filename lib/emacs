#!/usr/bin/env bash

_dir="$(dirname "$(realpath "${BASH_SOURCE[0]}")")"

# shellcheck source=./lib/helpers
source "$_dir"/helpers

log() {
	log_with_component emacs "$@"
}

log_start 'setting up Emacs'

if is_ubuntu || is_debian; then
	user_emacs_unit_path="$(xdg_config)"/systemd/user/emacs.service
	if ! [ -f "$user_emacs_unit_path" ]; then
		log_start 'linking Emacs service into place'
		package_emacs_unit_path=/usr/lib/systemd/user/emacs.service
		systemctl --user link "$package_emacs_unit_path"
		systemctl --user daemon-reload
		log_end 'done linking Emacs service into place.'
	fi

	if ! systemctl --user is-enabled --quiet emacs.service; then
		log_start 'setting up Emacs daemon'
		systemctl --user enable --now emacs.service
		log_end
	fi

fi

log_start 'setting up Emacs configuration'
emacs_config_dir="$(xdg_config)"/emacs
emacs_config_path="$emacs_config_dir"/init.el
if ! [ -f "$emacs_config_path" ]; then
	log_start 'installing Emacs configuration'
	mkdir -p "$emacs_config_dir"
	_ln "$_dir"/../config/emacs.el "$emacs_config_path"
	log_end
fi

emacs_local_config_path="$emacs_config_dir"/lisp/init-local.el
if ! [ -f "$emacs_local_config_path" ]; then
	log_start 'installing template for local Emacs configuration'
	cat >"$emacs_local_config_path" <<-EOF
		;;; init-local.el --- Local configuration overrides for Emacs.
		;;; Commentary:

		;;; Local, machine-specific configuration for Emacs.

		;;; Code:

		; (setq initial-buffer-choice "~/<path to file to open at launch>")
		; (setq org-directory "~/<path to org directory>")
		; (setq org-agenda-files '("~/<path to file to use for org agenda>"))

		(provide 'init-local)

		;; Local Variables:
		;; byte-compile-warnings: (not free-vars unresolved)
		;; End:
		;;; init-local.el ends here
	EOF
	log_end
fi

if is_macos; then
	log_start 'linking Emacs configuration to home directory for macOS Emacs'
	mkdir -p "$HOME"/.emacs.d/lisp
	_ln "$emacs_config_path" "$HOME"/.emacs.d
	_ln "$emacs_local_config_path" "$HOME"/.emacs.d/lisp
	log_end
fi
log_end

log_end
